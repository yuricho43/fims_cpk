@inherits LayoutComponentBase
@using FimsCPK.Entities
@using Microsoft.AspNetCore.Identity
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;

@inject UserManager<AspNetUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavManager

<TelerikRootComponent>
    <div class="header">
        <div class="nav-container" style="margin-right: 2em;">
            <div class="menu-button">
                <TelerikButton Icon="@SvgIcon.Menu" OnClick="ToggleMenuDrawer"></TelerikButton>
            </div>
            @{
                if (!WindowWidthSmall)
                {
                    <DigitalClock></DigitalClock>
                }
            }
            <div class="title">
                <h1>@($"{Constants.FimsCpkTitle} ({Constants.FimsCpkVersion})")</h1>
            </div>
            <AuthorizeView>
                <Authorized>
                    &nbsp;&nbsp;@gLoggedId&nbsp;&nbsp;
                    <NavLink class="text-decoration-none" href="terminate">Logout</NavLink>
                </Authorized>
                <NotAuthorized>
                    <div class="w-100 d-flex justify-content-end gap-5">
                        <NavLink class="text-decoration-none" href="Identity/Account/Login">Login</NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
            &nbsp;&nbsp;
            &nbsp;&nbsp;
            <a href="https://www.fstc.co.kr" class="reload">FST</a>
        </div>
    </div>

    <AuthorizeView>
        <Authorized>
            <TelerikDrawer @ref="FimsCpkDrawer"
                           Data="@FimsCpkDrawerItems"
                           Expanded="@DrawerExpanded"
                           ExpandedChanged="((bool newValue) => ExpandedChangedHandler(newValue))"
                           Width="160px" Mode="DrawerMode.Push" Position="DrawerPosition.Start" MiniMode="true">
                <DrawerContent>
                    @Body
                </DrawerContent>
            </TelerikDrawer>
        </Authorized>
        <NotAuthorized>
            <br />
            <h1 class="text-center mb-5" style="color:red"> <a href="Identity/Account/Login">로그인</a></h1>
        </NotAuthorized>
    </AuthorizeView>

</TelerikRootComponent>

@code {
    bool DrawerExpanded { get; set; }
    bool WindowWidthSmall { get; set; }

    TelerikDrawer<DrawerItem> FimsCpkDrawer { get; set; }
    public IEnumerable<DrawerItem> FimsCpkDrawerItems { get; set; }

    private string gLoggedId { get; set; } = "";

    List<DrawerItem> CpkPages { get; set; } = new List<DrawerItem>
    {
        new DrawerItem { Text = "Home", Url = "/home", Icon =SvgIcon.Home },
        new DrawerItem { Separator = true },
        new DrawerItem { Text = "CPK 체크", Url = "/cpk", Icon = SvgIcon.Search },
        //new DrawerItem { Text = "정규 분포", Url = "/cpknormal", Icon = SvgIcon.Graph },
        new DrawerItem { Text = "LCL/UCL관리", Url = "/cpksettings", Icon = SvgIcon.BuildingBlocks },
        new DrawerItem { Separator = true },
        new DrawerItem { Text = "검사리스트", Url = "/sheets", Icon = SvgIcon.Grid },
        new DrawerItem { Text = "검사 결과", Url = "/sndata", Icon = SvgIcon.Data },
        new DrawerItem { Separator = true },
        new DrawerItem { Text = "검사 스펙", Url = "/modelspec", Icon = SvgIcon.BuildingBlocks },
        new DrawerItem { Separator = true },
        //new DrawerItem { Text = "수정사항(임시)", Url = "/history", Icon = SvgIcon.ListOrdered },
        //new DrawerItem { Text = "관리자", Url = "/adminpage", Icon = SvgIcon.Eyedropper },
        new DrawerItem { Separator = true }
    };

    public class DrawerItem
    {
        public string Text { get; set; }
        public ISvgIcon Icon { get; set; }
        public string Url { get; set; }
        public bool Separator { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        DrawerExpanded = true;
        string id = UserManager.GetUserName(HttpContextAccessor.HttpContext.User);
        gLoggedId = UserManager.Users.Where(t => t.UserName == id).Select(x => x.HangulName).FirstOrDefault();
        if (gLoggedId == null)
            NavManager.NavigateTo("/Identity/Account/login");

    }

    protected override async Task OnParametersSetAsync()
    {
        FimsCpkDrawerItems = CpkPages;
        if (FimsCpkDrawer != null)
            await FimsCpkDrawer.ExpandAsync();
        StateHasChanged();
    }

    async Task ExpandedChangedHandler(bool value)
    {
        DrawerExpanded = value;
    }

    async Task ToggleMenuDrawer()
    {
        if (DrawerExpanded)
        {
            await FimsCpkDrawer.CollapseAsync();
        }
        else
        {
            await FimsCpkDrawer.ExpandAsync();
        }
    }
}

