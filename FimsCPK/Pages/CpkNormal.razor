@page "/cpknormal"

@using FimsCPK.Models;
@using FimsCPK.Services
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;
@inject IJSRuntime JsRuntime
@inject CpkService cpkService

<style>
    .k-grid tbody {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 0.5;
        font-size: 12px;
        font-family: calibri;
        /* background-color: lightyellow;*/
    }

    .k-grid-header .k-header {
        font-weight: bold;
        font-size: 14px;
        font-family: calibri;
        padding: 1px;
        margin: 1px;
        text-align: center;
        background-color: lightcyan;
    }
</style>


<PageTitle>Fims Dashboard</PageTitle>
<div class="card-header text-lg-center pt-2 pb-2 fw-bold px-9"> 정규분포 </div>

<TelerikCard>

    <CardHeader>
        &nbsp;&nbsp;&nbsp
        <label for="myIncludeDate" ThemeColor="success" style="color:red ">&nbsp;&nbsp;&nbsp;기간지정</label>
        <TelerikCheckBox Id="myIncludeDate" @bind-Value="@gSetDuration" />&nbsp;&nbsp
        <TelerikDatePicker Min="@gMinYear" Max="@gMaxYear" @bind-Value="@gStartYear"
                           BottomView="@CalendarView.Month"
                           Format="yyyy-MM-dd" Width="120px"></TelerikDatePicker>
        ~
        <TelerikDatePicker @bind-Value="@gEndYear"
                           BottomView="@CalendarView.Month"
                           Format="yyyy-MM-dd" Width="120px"></TelerikDatePicker>

        <label for="myModel"> &nbsp;&nbsp;&nbsp;&nbsp;모델:</label>
        <TelerikComboBox Data="@gModelNames" Width="200px" @bind-Value="@gTargetModel" OnChange="@ModelChangeHandler"
                         Placeholder="Select Model..." ClearButton="true" Filterable="true">
        </TelerikComboBox>

        <label for="myTestNum"> &nbsp;&nbsp;&nbsp;&nbsp;테스트번호:</label>
        <TelerikComboBox @ref="@ComboBoxRef"
                         Data="@gTestNumbers" Width="300px" @bind-Value="@gTargetNumber"
                         Placeholder="Select Test Item..." ClearButton="true" Filterable="true">
        </TelerikComboBox>

        <label for="myChannel"> &nbsp;&nbsp;&nbsp;&nbsp;Channel:</label>
        <TelerikComboBox Data="@gChananelNames" TextField="MyTextField" ValueField="MyValueField" Width="100px" @bind-Value="@gChannelName"
                         Placeholder="..." ClearButton="true" Filterable="true">
        </TelerikComboBox>

        &nbsp;&nbsp;&nbsp;&nbsp;<strong>[항목수=@gCounter]</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <TelerikButton ThemeColor="success" OnClick="@Retrieve_TestData_For_Model" Icon="FontIcon.Search">정규분포 그래프</TelerikButton>&nbsp;&nbsp;&nbsp;&nbsp;
    </CardHeader>

    <CardBody>

        <TelerikTileLayout Columns="6"
                           ColumnWidth="18%"
                           RowHeight="200px"
                           Reorderable="true"
                           Resizable="true">
            <TileLayoutItems>
                <TileLayoutItem HeaderText="@gTargetModel" RowSpan="3" ColSpan="2">
                    <HeaderTemplate>
                        <h4 style="color:blue"><strong>CTQ 값:@gTargetModel&nbsp-@gTargetNumber</strong></h4>
                    </HeaderTemplate>
                    <Content>
                        <TelerikGrid Class="cpk-grid"
                                     Data="@gListCtq"
                                     ConfirmDelete="true"
                                     Pageable="false"
                                     Groupable="false"
                                     Sortable="false"
                                     FilterMode="GridFilterMode.FilterMenu"
                                     Resizable="true"
                                     Reorderable="true"
                                     EditMode="GridEditMode.Popup"
                                     PageSize=@gPageSize
                                     Navigable="true"
                                     Height="100%">

                            <GridToolBarTemplate>
                                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
                            </GridToolBarTemplate>

                            <GridSettings>
                                <GridPagerSettings InputType="PagerInputType.Buttons"
                                                   ButtonCount="20"
                                                   Position="PagerPosition.Top">
                                </GridPagerSettings>
                            </GridSettings>

                            <GridExport>
                                <GridExcelExport FileName="@gStrFilename" AllPages="true" />
                            </GridExport>

                            <GridColumns>


                                <GridColumn Field=@nameof(CPK_Items.sn) Width="30px" Title="SN" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.workdate) Width="60px" Title="검사날짜" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.value1) Width="30px" Title="CH1값" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.value2) Width="30px" Title="CH2값" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.value3) Width="30px" Title="CH3값" Sortable=true />

                                @*
                                <GridColumn Field=@nameof(Tsheet.ProductSerial) Width="30px" Title="SN" Sortable=true />
                                <GridColumn Field=@nameof(Tsheet.InspectionEndDateTime) Width="40px" Title="검사날짜" Sortable=true />
                                <GridColumn Field=@nameof(Tsheet.InspectorName) Width="30px" Title="값" Sortable=true />
                                *@
                            </GridColumns>

                        </TelerikGrid>
                    </Content>
                </TileLayoutItem>

                <TileLayoutItem HeaderText="정규분포" RowSpan="3" ColSpan="2">
                    <HeaderTemplate>
                        <h4 style="color:green"><strong>정규분포 : @gTargetModel&nbsp-@gTargetNumber</strong></h4>
                        <h6 style="color:green"><strong>avg:@gAvg, std:@gStdDev, lcl:@gSelectedLcl ucl:@gSelectedUcl</strong></h6>
                     </HeaderTemplate>
                    <Content>
                        <TelerikChart Height="100%" Width="100%" @ref="theChart">
                            <ChartTooltip Visible="false" Shared="true"></ChartTooltip>
                            <ChartLegend Visible="false"></ChartLegend>
                            <ChartSeriesItems>
                                <ChartSeries Type="ChartSeriesType.Line"
                                             Name="Value1"
                                             Data="@gNormalValue"
                                             Color="blue"
                                             Field="@nameof(CPK_NormalDist.value1)" CategoryField="@nameof(CPK_NormalDist.value2)">
                                    @*
                                    <ChartSeriesLabels Template="#=value#" Visible="true" Color="blue" Background="#FF000000"></ChartSeriesLabels>
                                    *@
                                    <ChartSeriesMarkers Size="-1">
                                        <ChartSeriesMarkersBorder Width="-1"></ChartSeriesMarkersBorder>
                                    </ChartSeriesMarkers>

                                </ChartSeries>
                            </ChartSeriesItems>

                            <ChartTitle Text="@gTargetModel" Description="Product Sales by Year and Country">
                                <ChartSubtitle Text="@gNormalSubtitle"></ChartSubtitle>
                            </ChartTitle>

                            <ChartCategoryAxes>
                                <ChartCategoryAxis>
                                    <ChartCategoryAxisPlotBands>
                                        <ChartCategoryAxisPlotBand From="@gGraphLcl" To="gGraphLcl" Color="blue" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="50" To="50" Color="red" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gGraphUcl" To="gGraphUcl" Color="blue" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gSigma1L" To="gSigma1U" Color="green" Opacity="0.3"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gSigma2L" To="gSigma2U" Color="red" Opacity="0.3"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gSigma3L" To="gSigma3U" Color="yellow" Opacity="0.3"></ChartCategoryAxisPlotBand>
                                    </ChartCategoryAxisPlotBands>
                                    <ChartCategoryAxisLabels Step="20" />
                                </ChartCategoryAxis>
                            </ChartCategoryAxes>

                        </TelerikChart>
                    </Content>
                </TileLayoutItem>

                <TileLayoutItem HeaderText="X-R 관리도" RowSpan="3" ColSpan="2">
                    <HeaderTemplate>
                        <h4 style="color:green"><strong>X-R 관리도: @gTargetModel&nbsp-@gTargetNumber</strong></h4>
                        <h6 style="color:green"><strong>avg:@gAvg, std:@gStdDev, lcl:@gSelectedLcl ucl:@gSelectedUcl</strong></h6>
                    </HeaderTemplate>
                    <Content>
                        <TelerikChart Height="100%" Width="100%" @ref="theChart">
                            <ChartTooltip Visible="true" Shared="true"></ChartTooltip>
                            <ChartLegend Visible="false"></ChartLegend>
                            <ChartSeriesItems>
                                <ChartSeries Type="ChartSeriesType.Line"
                                             Name="Value1"
                                             Data="@gNormalValue"
                                             Color="blue"
                                             Field="@nameof(CPK_NormalDist.value1)" CategoryField="@nameof(CPK_NormalDist.value2)">
                                    @*
                                    <ChartSeriesLabels Template="#=value#" Visible="true" Color="blue" Background="#FF000000"></ChartSeriesLabels>
                                    *@
                                    <ChartSeriesMarkers Size="5">
                                        <ChartSeriesMarkersBorder Width="-1"></ChartSeriesMarkersBorder>
                                    </ChartSeriesMarkers>

                                </ChartSeries>
                            </ChartSeriesItems>

                            <ChartTitle Text="@gTargetModel" Description="Product Sales by Year and Country">
                                <ChartSubtitle Text="@gNormalSubtitle"></ChartSubtitle>
                            </ChartTitle>

                            <ChartCategoryAxes>
                                <ChartCategoryAxis>
                                    <ChartCategoryAxisPlotBands>
                                        <ChartCategoryAxisPlotBand From="@gGraphLcl" To="gGraphLcl" Color="blue" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="50" To="50" Color="red" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gGraphUcl" To="gGraphUcl" Color="blue" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gSigma1L" To="gSigma1U" Color="green" Opacity="0.3"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gSigma2L" To="gSigma2U" Color="red" Opacity="0.3"></ChartCategoryAxisPlotBand>
                                        <ChartCategoryAxisPlotBand From="@gSigma3L" To="gSigma3U" Color="yellow" Opacity="0.3"></ChartCategoryAxisPlotBand>
                                    </ChartCategoryAxisPlotBands>
                                    <ChartCategoryAxisLabels Step="10" />
                                </ChartCategoryAxis>
                            </ChartCategoryAxes>

                        </TelerikChart>
                    </Content>
                </TileLayoutItem>
            </TileLayoutItems>
        </TelerikTileLayout>
    </CardBody>

</TelerikCard>

@code {
    public class CPK_Items
    {
        public string sn { get; set; }
        public DateTime workdate { get; set; }
        public float value1 { get; set; }
        public float value2 { get; set; }
        public float value3 { get; set; }
    };

    public class CPK_NormalDist
    {
        public string xCategory { get; set; }
        public double value1 { get; set; }
        public double value2 { get; set; }
        public double value3 { get; set; }
    };


    public class CPK_Statistics
    {
        public string name { get; set; }
        public int num { get; set; }
        public int numSpecIn { get; set; }
        public int numGood { get; set; }
        public double average { get; set; }
        public double stddev { get; set; }
        public double sum { get; set; }

        public double min { get; set; }
        public double max { get; set; }
        public double cp { get; set; }
        public double cpk { get; set; }

        public string lcl { get; set; }
        public string ucl { get; set; }
        public string lsl { get; set; }
        public string usl { get; set; }
    };


    static List<string> gModelNames = new List<string>();
    List<string> gTestNumbers { get; set; } = new List<string>();
    static string[] gChananelNames = { "1", "2", "3" };

    public List<CPK_Items> gListCtq { get; set; }
    public List<CPK_Items> gListCtqBlank { get; set; } = new List<CPK_Items>();
    public List<CPK_Statistics> gCpkStats { get; set; }
    private TelerikGrid<CPK_Statistics> GridRef { get; set; }
    private List<CPK_NormalDist> gNormalValue { get; set; } = new List<CPK_NormalDist>();

    public DateTime gMinYear = new DateTime(2023, 1, 1, 0, 0, 0);
    public DateTime gMaxYear = new DateTime(2030, 1, 1, 0, 0, 0);

    private DateTime gStartYear = DateTime.Now;
    private DateTime gEndYear = DateTime.Now;

    private string gTargetModel = "";
    private string gTargetNumber = "";
    private string gTargetOnlyNumber = "";
    private string gNormalSubtitle = "평균=-, 표준편차=-";
    private string gChannelName = "Channel1";
    private bool gSetDuration = false;
    private int gCounter = 0;

    public int gSpanYear = 0;
    public int gPageSize = 100;
    bool ExportAllPages { get; set; }
    string gStrFilename { get; set; }
    string gLastSelectedModel = "";
    public bool gCh1Visible { get; set; } = true;
    public bool gCh2Visible { get; set; } = true;
    public bool gCh3Visible { get; set; } = true;

    //--------------------------------------------------------
    //--- lcl/ucl, lsl,usl
    public double gCh1Lcl { get; set; } = 42;
    public double gCh1Ucl { get; set; } = 46;
    public double gCh2Lcl { get; set; }
    public double gCh2Ucl { get; set; }
    public double gCh3Lcl { get; set; }
    public double gCh3Ucl { get; set; }

    //--- 그래프에 표시될 값 : 선택된 채널에 따라 설정
    public string gSelectedValue = "";
    public double gSelectedLcl = 0;
    public double gSelectedUcl = 0;
    public double gAvg = 0;
    public double gStdDev = 0;

    public double gGraphLcl = 0;
    public double gGraphUcl = 0;
    public double gSigma1L = 0;
    public double gSigma1U = 0;
    public double gSigma2L = 0;
    public double gSigma2U = 0;
    public double gSigma3L = 0;
    public double gSigma3U = 0;


    //--- TestNo Combobox refresh를 위한 것
    public TelerikComboBox<string, string> ComboBoxRef { get; set; }
    Telerik.Blazor.Components.TelerikChart theChart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        gStrFilename = "CtqList_" + gTargetModel + "_" + gTargetNumber + "_" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss");
        gStartYear = gEndYear.AddMonths(-12);
        gCpkStats = new List<CPK_Statistics>();
        List_Models();
    }

    private void List_Models()
    {
        //--- if alread models are listed-up, skip
        if (gModelNames.Count > 0)
            return;

        List<CpkItem> tCpkModelList;

        using (var db = new FimsDbContext())
        {
            tCpkModelList = db.CpkItems.ToList();
        }

        var models = from cpkModel in tCpkModelList
                     orderby cpkModel.Model
                     group cpkModel by cpkModel.Model into grp
                     select grp.Key;

        foreach (var item in models)
        {
            gModelNames.Add(item.ToString());
        }
    }

    private async void ModelChangeHandler(object theUserInput)
    {
        string selectedModel = theUserInput.ToString();
        if (selectedModel == gLastSelectedModel)
            return;

        gLastSelectedModel = selectedModel;

        //--- Check Test Items
        gTestNumbers.Clear();
        using (var db = new FimsDbContext())
        {
            var lists = db.CpkItems.Where(n => n.Model == gLastSelectedModel).Select(p => p.TestNo).ToList();

            List<int> temp = lists.ToList();
            foreach (var tno in temp)
            {
                gTestNumbers.Add("(" + tno + "):" + db.TspecItems.Where(x => x.TestNo == tno).Select(p => p.Title).FirstOrDefault());
            }

            gTargetNumber = gTestNumbers[0];
        }
        ComboBoxRef.Rebind();

        gChannelName = "1";
    }

    //-- Need Model Name, Test#, ChannelNo
    /// <summary>
    ///
    /// </summary>
    private void Retrieve_TestData_For_Model()
    {
        if (gTargetModel == null || gTargetModel.Length < 3 ||
            gTargetNumber == null || gTargetNumber.Length < 3)
        {
            Alert("Model, TestNo를 선택해야 합니다");
            return;
        }

        string strStartDate = gStartYear.ToString("yyyy-MM-dd");
        string strEndDate = gEndYear.ToString("yyyy-MM-dd");


        gTargetOnlyNumber = gTargetNumber.Substring(gTargetNumber.IndexOf("(") + 1, gTargetNumber.IndexOf(")") - 1);
        int iTestNo = int.Parse(gTargetOnlyNumber);
        string strModel = gTargetModel;

        using (var db = new FimsDbContext())
        {
            if (gSetDuration == false) // 날짜 무시
                gListCtq = (from sheet in db.Tsheets
                            from item in db.Titems
                            orderby sheet.InspectionEndDateTime
                            where sheet.ProductModel == gTargetModel &&
                                 sheet.Id == item.TsheetId &&
                                 item.TestNo == iTestNo
                            select new CPK_Items
                                {
                                    sn = sheet.ProductSerial,
                                    workdate = sheet.InspectionEndDateTime,
                                    value1 = (float)(item.Ch1Data == null ? 0.0 : float.Parse(item.Ch1Data)),
                                    value2 = (float)(item.Ch2Data == null ? 0.0 : float.Parse(item.Ch2Data)),
                                    value3 = (float)(item.Ch3Data == null ? 0.0 : float.Parse(item.Ch3Data))
                                }).ToList();
            else
                gListCtq = (from sheet in db.Tsheets
                            from item in db.Titems
                            orderby sheet.InspectionEndDateTime
                            where sheet.ProductModel == gTargetModel &&
                                 sheet.Id == item.TsheetId &&
                                 item.TestNo == iTestNo &&
                                 sheet.InspectionEndDateTime >= gStartYear &&
                                 sheet.InspectionEndDateTime <= gEndYear
                            select new CPK_Items
                                {
                                    sn = sheet.ProductSerial,
                                    workdate = sheet.InspectionEndDateTime,
                                    value1 = (float)(item.Ch1Data == null ? 0.0 : float.Parse(item.Ch1Data)),
                                    value2 = (float)(item.Ch2Data == null ? 0.0 : float.Parse(item.Ch2Data)),
                                    value3 = (float)(item.Ch3Data == null ? 0.0 : float.Parse(item.Ch3Data))
                                }).ToList();

            gListCtq = gListCtq.Where(x => x.value1 != 0 || x.value2 != 0 || x.value3 != 0).ToList();
            gCounter = gListCtq.Count();

            //---- 계산 : gCpkStats 값 채움
            CPK_Statistics record;

            gCpkStats.Clear();
            gCh1Visible = false;
            gCh2Visible = false;
            gCh3Visible = false;

            record = GetStatistics(1, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gCh1Visible = true;
            }

            record = GetStatistics(2, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gCh2Visible = true;
            }

            record = GetStatistics(3, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gCh3Visible = true;
            }

            GridRef?.Rebind();
        }


        //--- select graph value
        gSelectedValue = "value" + gChannelName;
        string chname = "Ch-" + gChannelName;
        var c1 = gCpkStats.Where(x => x.name == chname).Select(p => p.average).ToList();
        gAvg = c1.Count == 0 ? 0 : c1[0];
        gAvg = Math.Round(gAvg, 2);

        var c2 = gCpkStats.Where(x => x.name == chname).Select(p => p.stddev).ToList();
        gStdDev = c2.Count == 0 ? 0 : c2[0];
        gStdDev = Math.Round(gStdDev, 2);

        gNormalValue.Clear();
        gNormalSubtitle = "평균=" + gAvg.ToString() + ", 표준편차=" + gStdDev.ToString();
        if (gAvg == 0 && gStdDev == 0)
        {
            theChart.Refresh();
            return;
        }

        if (gChannelName == "1")
        {
            gSelectedLcl = gCh1Lcl;
            gSelectedUcl = gCh1Ucl;
        }
        else if (gChannelName == "2")
        {
            gSelectedLcl = gCh2Lcl;
            gSelectedUcl = gCh2Ucl;
        }
        else if (gChannelName == "3")
        {
            gSelectedLcl = gCh3Lcl;
            gSelectedUcl = gCh3Ucl;
        }
        else
        {
            gSelectedLcl = 0;
            gSelectedUcl = 0;
        }

        //--- 정규분포 값 계산
        //    입력 : gAvg, gStdDev, point수
        //    계산 : xMin, xMax, step
        int pointCount = 100;
        double xMin = gAvg - 4 * gStdDev;
        double xMax = gAvg + 4 * gStdDev;
        double step = (xMax - xMin) / pointCount;
        int ix = 0;

        for (double x = xMin; x <= xMax; x += step)
        {
            CPK_NormalDist nd = new CPK_NormalDist();
            nd.value1 = NormalDistribution(x, gAvg, gStdDev);
            nd.xCategory = x.ToString("#.##");
            nd.value2 = ((int)(x*1000))/1000.0;
            gNormalValue.Add(nd);
            ix++;
        }

        //--- set lcl/ucl, sigma1, sigma2, sigma3
        gGraphLcl = GetXIndex(xMin, xMax, step, gSelectedLcl);
        gGraphUcl = GetXIndex(xMin, xMax, step, gSelectedUcl);
        gSigma1L = GetXIndex(xMin, xMax, step, gAvg - gStdDev);
        gSigma1U = GetXIndex(xMin, xMax, step, gAvg + gStdDev);
        gSigma2L = GetXIndex(xMin, xMax, step, gAvg - 2*gStdDev);
        gSigma2U = GetXIndex(xMin, xMax, step, gAvg + 2*gStdDev);
        gSigma3L = GetXIndex(xMin, xMax, step, gAvg - 3*gStdDev);
        gSigma3U = GetXIndex(xMin, xMax, step, gAvg + 3*gStdDev);
        theChart.Refresh();
    }

    private double NormalDistribution(double x, double mean, double stddev)
    {
        double expPart = Math.Exp(-Math.Pow(x - mean, 2) / (2 * Math.Pow(stddev, 2)));
        return (1 / (stddev * Math.Sqrt(2 * Math.PI))) * expPart;
    }

    //--- return index of Value in num : dMin~dMax : num
    //    
    private double GetXIndex(double dMin, double dMax, double step, double dValue)
    {
        double diff = dValue - dMin;
        double dix = Math.Ceiling(diff / step);
        return dix;
    }

    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message); // Alert
    }

    // gTargetModel, gTargetNumber
    private CPK_Statistics GetStatistics(int ixCh, List<CPK_Items> cpkitems)
    {
        List<float> items;

        if (ixCh == 1)
        {
            items = cpkitems.Select(n => n.value1).ToList();
        }
        else if (ixCh == 2)
        {
            items = cpkitems.Select(n => n.value2).ToList();
        }
        else if (ixCh == 3)
        {
            items = cpkitems.Select(n => n.value3).ToList();
        }
        else
        {
            return null;
        }

        string strLSL = "";
        string strUSL = "";
        CPK_Statistics record = new CPK_Statistics();

        record.name = "Ch-" + ixCh.ToString();
        record.num = items.Count();
        if (record.num > 30)
        {
            record.average = items.Average();
            record.min = items.Min();
            record.max = items.Max();
            record.stddev = getStandardDeviation(items);
            record.sum = items.Sum();

            //--- get lsl,usl, lcl, ucl
            cpkService.GetSL(gTargetModel, gTargetOnlyNumber, ixCh, ref strLSL, ref strUSL);
            record.lsl = strLSL;
            record.usl = strUSL;
            cpkService.GetCL(gTargetModel, gTargetOnlyNumber, ixCh, ref strLSL, ref strUSL);
            record.lcl = strLSL;
            record.ucl = strUSL;


            if (record.sum != 0)
            {
                double dl = double.Parse(record.lcl ?? "0");
                double du = double.Parse(record.ucl ?? "0");

                switch (ixCh)
                {
                    case 1:
                        gCh1Lcl = dl;
                        gCh1Ucl = du;
                        break;
                    case 2:
                        gCh2Lcl = dl;
                        gCh2Ucl = du;
                        break;
                    case 3:
                        gCh3Lcl = dl;
                        gCh3Ucl = du;
                        break;
                }

                //--- cpk, cp 계산
                //    Cp = (UCL-LCL)/(6*표준편차)
                //    Cpk = MIN( (평균-LSL)/(3*표준편차), (USL-평균)/(3*표준편차))
                dl = double.Parse(record.lcl ?? "0");
                du = double.Parse(record.ucl ?? "0");
                record.cp = (du - dl) / (6 * record.stddev);
                double cpk1 = (record.average - dl) / (3 * record.stddev);
                double cpk2 = (du - record.average) / (3 * record.stddev);
                record.cpk = Math.Min(cpk1, cpk2);

                float fdl = (float)dl;
                float fdu = (float)du;
                record.numGood = items.Where(x => x >= fdl && x <= fdu).Count();

            }
        }

        return record;
    }

    private float getStandardDeviation(List<float> floatList)
    {
        float average = floatList.Average();
        float sumOfDerivation = 0;
        foreach (float value in floatList)
        {
            sumOfDerivation += (value) * (value);
        }
        double sumOfDerivationAverage = sumOfDerivation / floatList.Count;
        return (float)Math.Sqrt(sumOfDerivationAverage - (average * average));
    }
}
