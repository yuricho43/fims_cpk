@page "/modelspec"

@using FimsCPK.Models;
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;
@inject IJSRuntime JsRuntime

<style>
    .k-grid tbody {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 0.5;
        font-size: 12px;
        font-family: calibri;
        /* background-color: lightyellow;*/
    }

    .k-grid-header .k-header {
        font-weight: bold;
        font-size: 14px;
        font-family: calibri;
        padding: 1px;
        margin: 1px;
        text-align: center;
        background-color: lightcyan;
    }
</style>


<PageTitle>Fims Dashboard</PageTitle>

<TelerikCard>

    <CardHeader>
        &nbsp;&nbsp;&nbsp
        <label for="myModel"> &nbsp;&nbsp;&nbsp;&nbsp;모델:</label>
        <TelerikComboBox Data="@gModelNames" Width="200px" @bind-Value="@gStringModel"
                         Placeholder="Select an item..." ClearButton="true" Filterable="true" TextField="MyTextField" ValueField="MyValueField" AllowCustom="true">
        </TelerikComboBox>
        &nbsp;&nbsp;&nbsp;&nbsp;<strong>[항목수=@gCounter]</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <TelerikButton ThemeColor="success" OnClick="@Retrieve_TestData_For_Serial" Icon="FontIcon.Search">검사스펙 보기</TelerikButton>&nbsp;&nbsp;&nbsp;&nbsp;
    </CardHeader>

    <CardBody>

        <TelerikGrid Class="item-grid"
                     Data="@gItemList"
                     ConfirmDelete="true"
                     Pageable="false"
                     Groupable="false"
                     Sortable="false"
                     FilterMode="GridFilterMode.FilterMenu"
                     Resizable="true"
                     Reorderable="true"
                     EditMode="GridEditMode.Popup"
                     PageSize=@gPageSize
                     Navigable="true"
                     Height="100%">

            <GridToolBarTemplate>
                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
            </GridToolBarTemplate>

            <GridSettings>
                <GridPagerSettings InputType="PagerInputType.Buttons"
                                   ButtonCount="20"
                                   Position="PagerPosition.Top">
                </GridPagerSettings>
            </GridSettings>

            <GridExport>
                <GridExcelExport FileName="telerik-grid-export" AllPages="true" />
            </GridExport>

            <GridColumns>
                <GridColumn Field=@nameof(Titem.TestNo) Width="30px" Title="테스트번호" Sortable=true />
                <GridColumn Field=@nameof(Titem.Category) Width="60px" Title="대분류" Sortable=true />
                <GridColumn Field=@nameof(Titem.Title) Width="30px" Title="검사항목" Sortable=true />
                <GridColumn Field=@nameof(Titem.Unit) Width="30px" Title="단위" Sortable=true />
                <GridColumn Field=@nameof(Titem.Channels) Width="30px" Title="#CH" Sortable=true />
                <GridColumn Field=@nameof(Titem.ExpressionMode) Width="30px" Title="표현방식" Sortable=true />
                <GridColumn Field=@nameof(Titem.Ch1Data) Width="30px" Title="CH1값" Sortable=true />
                <GridColumn Field=@nameof(Titem.Ch2Data) Width="30px" Title="CH2값" Sortable=true />
                <GridColumn Field=@nameof(Titem.Ch3Data) Width="30px" Title="CH3값" Sortable=true />
                <GridColumn Field=@nameof(Titem.CreatedOn) Width="30px" Title="생성일" Sortable=true />
            </GridColumns>

        </TelerikGrid>
    </CardBody>

</TelerikCard>

@code {
    static List<string> gModelNames = new List<string>();
    private string gStringModel = "";
    public List<Tsheet> gSheetList { get; set; }
    public List<Titem> gItemList { get; set; }

    private string gSerialNumber = "B1L00198";
    private int gCounter = 0;

    public int gPageSize = 100;
    bool ExportAllPages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        List_Models();
    }

    private void Retrieve_TestData_For_Serial()
    {
        Get_Equipment_Info(gSerialNumber);
    }

    private void Get_Equipment_Info(string strSN)
    {
        int iSheetId = -1;
        //--- if alread models are listed-up, skip
        if (strSN == null || strSN.Length < 5)
            return;

        using (var db = new FimsDbContext())
        {
            gSheetList = (from sheet in db.Tsheets
                          orderby sheet.InspectionEndDateTime
                          where sheet.ProductSerial == strSN
                          select sheet).ToList();
            gCounter = gSheetList.Count();
            if (gCounter <= 0)
                return;

            iSheetId = gSheetList[0].Id;

            gItemList = (from item in db.Titems
                         orderby item.TestNo
                         where item.TsheetId == iSheetId
                         select item).ToList();
            gCounter = gItemList.Count();

        }
    }

    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message); // Alert
    }

    private void List_Models()
    {
        //--- if alread models are listed-up, skip
        if (gModelNames.Count > 0)
            return;

        using (var db = new FimsDbContext())
        {
            gModelNames = (from sheet in db.Tsheets
                           orderby sheet.ProductModel
                           group sheet by sheet.ProductModel into grp
                           select grp.Key).ToList();
        }
    }

}
