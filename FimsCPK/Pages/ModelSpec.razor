@page "/modelspec"

@using FimsCPK.Models;
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;
@inject IJSRuntime JsRuntime

<style>
    .k-grid tbody {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 0.5;
        font-size: 12px;
        font-family: calibri;
        /* background-color: lightyellow;*/
    }

    .k-grid-header .k-header {
        font-weight: bold;
        font-size: 14px;
        font-family: calibri;
        padding: 1px;
        margin: 1px;
        text-align: center;
        background-color: lightcyan;
    }
</style>


<PageTitle>Fims Dashboard</PageTitle>

<TelerikCard>

    <CardHeader>
        &nbsp;&nbsp;&nbsp
        <label for="myModel"> &nbsp;&nbsp;&nbsp;&nbsp;모델:</label>
        <TelerikComboBox Data="@gModelNames" Width="200px" @bind-Value="@gStringModel"
                         Placeholder="Select an item..." ClearButton="true" Filterable="true" TextField="MyTextField" ValueField="MyValueField" AllowCustom="true">
        </TelerikComboBox>
        &nbsp;&nbsp;&nbsp;&nbsp;<strong>[항목수=@gCounter]</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <TelerikButton ThemeColor="success" OnClick="@Retrieve_Model_Specs" Icon="FontIcon.Search">검사스펙 보기</TelerikButton>&nbsp;&nbsp;&nbsp;&nbsp;
    </CardHeader>

    <CardBody>

        <TelerikGrid Class="item-grid"
                     Data="@gSpecItemList"
                     ConfirmDelete="true"
                     Pageable="false"
                     Groupable="false"
                     Sortable="false"
                     FilterMode="GridFilterMode.None"
                     Resizable="true"
                     Reorderable="true"
                     EditMode="GridEditMode.Popup"
                     Navigable="true"
                     Height="100%">

            <GridToolBarTemplate>
                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
            </GridToolBarTemplate>

            <GridSettings>
                <GridPagerSettings InputType="PagerInputType.Buttons"
                                   ButtonCount="20"
                                   Position="PagerPosition.Top">
                </GridPagerSettings>
            </GridSettings>

            <GridExport>
                <GridExcelExport FileName="telerik-grid-export" AllPages="true" />
            </GridExport>

            <GridColumns>
                <GridColumn Field=@nameof(TspecItem.Category) Width="50px" Title="Category" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.TestNo) Width="20px" Title="TestNo" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.Title) Width="60px" Title="Title" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.Unit) Width="20px" Title="Unit" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.Channels) Width="20px" Title="채널수" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.Applicable) Width="20px" Title="적용" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.ExpressionMode) Width="30px" Title="표현방법" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.Example) Width="50px" Title="Example" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.Ch1Ucl) Width="30px" Title="Ch1UCL" Sortable=true />
                <GridColumn Field=@nameof(TspecItem.Ch1Lcl) Width="30px" Title="Ch1LCL" Sortable=true />
                @if (@gNumChannel > 1)
                {
                    <GridColumn Field=@nameof(TspecItem.Ch2Ucl) Width="30px" Title="Ch2UCL" Sortable=true />
                    <GridColumn Field=@nameof(TspecItem.Ch2Lcl) Width="30px" Title="Ch2LCL" Sortable=true />
                }
                @if (@gNumChannel > 2)
                {
                    <GridColumn Field=@nameof(TspecItem.Ch3Ucl) Width="30px" Title="Ch3UCL" Sortable=true />
                    <GridColumn Field=@nameof(TspecItem.Ch3Lcl) Width="30px" Title="Ch3LCL" Sortable=true />
                }
                @if (@gNumChannel > 3)
                {
                    <GridColumn Field=@nameof(TspecItem.Ch4Ucl) Width="30px" Title="Ch4UCL" Sortable=true />
                    <GridColumn Field=@nameof(TspecItem.Ch4Lcl) Width="30px" Title="Ch4LCL" Sortable=true />
                }

            </GridColumns>

        </TelerikGrid>
    </CardBody>

</TelerikCard>

@code {
    static List<string> gModelNames = new List<string>();
    private string gStringModel = "";
    public List<TspecItem> gSpecItemList { get; set; }
    private int gCounter = 0;
    public int gNumChannel { get; set; }

    bool ExportAllPages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        gNumChannel = 4;
        List_Models();
    }

    private void Retrieve_Model_Specs()
    {
        Get_Model_Specs(gStringModel);
    }

    private void Get_Model_Specs(string strModel)
    {
        int iSheetId = -1;
        //--- if alread models are listed-up, skip
        if (strModel == null || strModel.Length < 2)
            return;

        gNumChannel = 4;
 
        using (var db = new FimsDbContext())
        {
            var listCh = (from models in db.TspecModels
                          where models.ProductModel == strModel
                          select models.NumChannel).ToList();
 
            if (listCh.Count > 0)
                gNumChannel = (int)(listCh[0]);

            gSpecItemList = (from models in db.TspecModels
                             from items in db.TspecItems
                             orderby items.TestNo
                             where models.ProductModel == strModel && models.Id == items.TspecModelId
                             select items).ToList();
            gCounter = gSpecItemList.Count();
            if (gCounter <= 0)
                return;

        }
    }

    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message); // Alert
    }

    private void List_Models()
    {
        gModelNames.Clear();
        //--- if alread models are listed-up, skip
        if (gModelNames.Count > 0)
            return;

        using (var db = new FimsDbContext())
        {
            gModelNames = (from models in db.TspecModels
                           orderby models.ProductModel
                           select models.ProductModel).ToList();
        }
    }

}
