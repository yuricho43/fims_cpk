@page "/sndata"

@using FimsCPK.Entities
@using FimsCPK.Models;
@using FimsCPK.Services
@using Microsoft.AspNetCore.Identity
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;
@inject CpkService cpkService
@inject UserManager<AspNetUser> _userManager
@inject IHttpContextAccessor _httpContextAccessor
@inject IJSRuntime JsRuntime

<PageTitle>Fims Dashboard</PageTitle>
<div class="card-header text-lg-center pt-2 pb-2 fw-bold px-9"> @gSerialNumber 검사 결과 </div>
<TelerikCard>

    <CardHeader>
        &nbsp;&nbsp;&nbsp
        <label for="mySerialNum"> &nbsp;&nbsp;&nbsp;&nbsp;장비 S/N:</label>
        <TelerikTextBox Id="mySerialNum" @bind-Value="@gSerialNumber" Width="150px" />
        &nbsp;&nbsp;&nbsp;&nbsp;<strong>[항목수=@gCounter]</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <TelerikButton ThemeColor="success" OnClick="@Retrieve_TestData_For_Serial" Icon="FontIcon.Search">검사결과 보기</TelerikButton>&nbsp;&nbsp;&nbsp;&nbsp;
    </CardHeader>

    <CardBody>

        <TelerikGrid Class="item-grid-info"
        Data="@gSheetList"
        ConfirmDelete="true"
        Pageable="false"
        Groupable="false"
        FilterMode="GridFilterMode.None"
        Sortable="false"
        Reorderable="true"
        PageSize=@gPageSize
        Height="100%">
            <GridColumns>
                <GridColumn Field=@nameof(Tsheet.Id) Width="30px" Title="Id" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.ProductModel) Width="60px" Title="모델" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.ProductSerial) Width="40px" Title="S/N" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.Customer) Width="60px" Title="고객" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.EndUser) Width="60px" Title="EndUser" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.InspectorName) Width="40px" Title="검사자" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.InspectionStartDateTime) Width="80px" Title="시작시간" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.InspectionEndDateTime) Width="80px" Title="종료시간" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.CloserName) Width="40px" Title="마감자" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.ClosingStartDateTime) Width="80px" Title="시작시간" Sortable=true />
                <GridColumn Field=@nameof(Tsheet.ClosingEndDateTime) Width="80px" Title="종료시간" Sortable=true />
            </GridColumns>
        </TelerikGrid>

        <TelerikGrid Class="item-grid"
        Data="@gItemList"
        ConfirmDelete="true"
        Pageable="false"
        Groupable="false"
        Sortable="false"
        FilterMode="GridFilterMode.FilterMenu"
        Resizable="true"
        Reorderable="true"
        EditMode="GridEditMode.Inline"
        OnUpdate="@UpdateHandler" 
        OnEdit="@EditHandler" 
        OnCancel="@CancelHandler"
        PageSize=@gPageSize
        Navigable="true"
        Height="100%">

            <GridToolBarTemplate>
                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
            </GridToolBarTemplate>

            <GridSettings>
                <GridPagerSettings InputType="PagerInputType.Buttons"
                ButtonCount="20"
                Position="PagerPosition.Top">
                </GridPagerSettings>
            </GridSettings>

            <GridExport>
                <GridExcelExport FileName="telerik-grid-export" AllPages="true" />
            </GridExport>

            <GridColumns>
                <GridColumn Field=@nameof(Titem.TestNo) Width="30px" Title="테스트번호" Sortable=true Editable="false" />
                <GridColumn Field=@nameof(Titem.Category) Width="60px" Title="대분류" Sortable=true Editable="false" />
                <GridColumn Field=@nameof(Titem.Title) Width="30px" Title="검사항목" Sortable=true Editable="false" />
                <GridColumn Field=@nameof(Titem.Unit) Width="30px" Title="단위" Sortable=true Editable="false" />
                <GridColumn Field=@nameof(Titem.Channels) Width="30px" Title="#CH" Sortable=true Editable="false" />
                <GridColumn Field=@nameof(Titem.ExpressionMode) Width="30px" Title="표현방식" Sortable=true Editable="false" />
                <GridColumn Field=@nameof(Titem.Ch1Data) Width="30px" Title="CH1값" Sortable=true />
                <GridColumn Field=@nameof(Titem.Ch2Data) Width="30px" Title="CH2값" Sortable=true />
                <GridColumn Field=@nameof(Titem.Ch3Data) Width="30px" Title="CH3값" Sortable=true />
                @*
                <GridColumn Field=@nameof(Titem.CreatedOn) Width="30px" Title="생성일" Sortable=true />
                *@
                @if (IsManager == true)
                {
                    <GridCommandColumn Width="30px">
                        <GridCommandButton Command="Save" Icon="@SvgIcon.Save" ShowInEdit="true">Update</GridCommandButton>
                        <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" Enabled="@IsManager">Edit</GridCommandButton>
                        <GridCommandButton Command="Cancel" Icon="@SvgIcon.Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                    </GridCommandColumn>
                }
            </GridColumns>

        </TelerikGrid>
    </CardBody>

</TelerikCard>

@code {
    public List<Tsheet> gSheetList { get; set; }
    public List<Titem> gItemList { get; set; }

    private string gSerialNumber = "";
    private int gCounter = 0;

    public int gPageSize = 100;
    bool ExportAllPages { get; set; }

    //--- For Editing Result
    [CascadingParameter]
    public DialogFactory Dialogs { get; set; }
    public string gRetMessage { get; set; } = "N";
    private bool IsManager { get; set; } = false;
    private string curRole = "None";


    protected override async Task OnInitializedAsync()
    {
        curRole = await GetUserRole();
        if (curRole.Contains("Admin"))
            IsManager = true;
        Retrieve_TestData_For_Serial();
    }

    private void Retrieve_TestData_For_Serial()
    {
        Get_Equipment_Info(gSerialNumber);
    }

    private void Get_Equipment_Info(string strSN)
    {
        gItemList = new List<Titem>();

        int iSheetId = -1;
        //--- if alread models are listed-up, skip
        if (string.IsNullOrWhiteSpace(strSN))
            return;

        using (var db = new FimsDbContext())
        {
            gSheetList = (from sheet in db.Tsheets
                          orderby sheet.InspectionEndDateTime
                          where sheet.ProductSerial == strSN
                          select sheet).ToList();
            gCounter = gSheetList.Count();
            if (gCounter <= 0)
                return;

            iSheetId = gSheetList[0].Id;

            gItemList = (from item in db.Titems
                         orderby item.TestNo
                         where item.TsheetId == iSheetId
                         select item).ToList();
            gCounter = gItemList.Count();

        }
    }

    //======================================================================
    //--- Edit Handler : Nothing to do
    void EditHandler(GridCommandEventArgs args)
    {
        if (IsManager == false)
            return;

        Titem item = (Titem)args.Item;
        Console.WriteLine("Edit event is fired.");
    }

    //======================================================================
    //--- Update LCL/UCL
    async Task UpdateHandler(GridCommandEventArgs args)
    {
        if (IsManager == false)
            return;

        Titem item = (Titem)args.Item;

        await ActivateConfirm("정말로 수정하시겠습니까 ?");
        if (gRetMessage == "N")
            return;

        // perform actual data source operations here through your service
        cpkService.UpdateInspectionItem(item);

        // update the local view-model data with the service data
        //await Get_Cpk_Items_For_Model(item.Model);

        Retrieve_TestData_For_Serial();
        StateHasChanged();
        Console.WriteLine("Update event is fired.");
    }

    //======================================================================
    //--- Cancel Handler : Nothing to do
    async Task CancelHandler(GridCommandEventArgs args)
    {
        // if necessary, perform actual data source operation here through your service
        Console.WriteLine("Cancel event is fired.");
    }

    //===========================================================
    private async Task<string> GetUserRole()
    {
        string strRole = "None";
        var roles = await GetCurrentUserRolesAsync();
        if (roles.Count > 0)
            strRole = roles[0];
        return strRole;
    }

    public async Task<IList<string>> GetCurrentUserRolesAsync()
    {
        // 현재 로그인한 사용자 확인
        var user = await _userManager.GetUserAsync(_httpContextAccessor.HttpContext.User);
        if (user == null)
        {
            return new List<string>();
        }

        // 사용자의 역할 반환
        return await _userManager.GetRolesAsync(user);
    }

    public async Task ActivateConfirm(string strMessage)
    {
        bool confirmed;
        if (string.IsNullOrWhiteSpace("Item Editing"))
        {
            confirmed = await Dialogs.ConfirmAsync(strMessage);
        }
        else
        {
            confirmed = await Dialogs.ConfirmAsync(strMessage, "Item Editing");
        }

        gRetMessage = confirmed ? "Y" : "N";
    }

    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message); // Alert
    }
}
