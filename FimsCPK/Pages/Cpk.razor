@page "/cpk"

@using FimsCPK.Data
@using FimsCPK.Entities
@using FimsCPK.Models;
@using FimsCPK.Services
@using Microsoft.AspNetCore.Identity
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;
@inject IJSRuntime JsRuntime
@inject CpkService cpkService
@inject NavigationManager NavManager
@inject UserConfigureService cfgService
@inject UserManager<AspNetUser> _userManager
@inject IHttpContextAccessor _httpContextAccessor

@************************** PAGE TITLE *****************************************************************@
<PageTitle>Fims Dashboard</PageTitle>
<div class="card-header text-lg-center pt-2 pb-2 fw-bold px-9"> CPK 체크 </div>

<AuthorizeView>
    <Authorized>
        <TelerikCard>
            @************************** PAGE HEADER 구성 *************************************************************
            기간설정 (년/월~년/월), 모델 선택, 테스트항목 선택,   (채널선택==> 모든 채널 표시), CPK_CHECK 버튼
            ********************************************************************************************************@
            <CardHeader>
                &nbsp;&nbsp;&nbsp
                <label for="myIncludeDate" ThemeColor="success" style="color:red ">&nbsp;&nbsp;&nbsp;기간지정</label>
                <TelerikCheckBox Id="myIncludeDate" @bind-Value="@gSetDuration" />&nbsp;&nbsp
                <TelerikDatePicker Min="@gMinYear" Max="@gMaxYear" @bind-Value="@gStartYear"
                                   BottomView="@CalendarView.Month"
                                   Format="yyyy-MM-dd" Width="120px"></TelerikDatePicker>
                ~
                <TelerikDatePicker @bind-Value="@gEndYear"
                                   BottomView="@CalendarView.Month"
                                   Format="yyyy-MM-dd" Width="120px"></TelerikDatePicker>

                <label for="myModel"> &nbsp;&nbsp;&nbsp;&nbsp;모델:</label>
                <TelerikComboBox Data="@gModelNames" Width="200px" @bind-Value="@gTargetModel" OnChange="@ModelChangeHandler"
                                 Placeholder="Select Model..." ClearButton="true" Filterable="true">
                </TelerikComboBox>

                <label for="myTestNum"> &nbsp;&nbsp;&nbsp;&nbsp;테스트번호:</label>
                <TelerikComboBox @ref="@ComboBoxRef"
                                 Data="@gTestNumbers" Width="300px" @bind-Value="@gTargetNumber" OnChange="@Retrieve_TestData_For_Model"
                                 Placeholder="Select Test Item..." ClearButton="true" Filterable="true">
                </TelerikComboBox>

                &nbsp;&nbsp;&nbsp;&nbsp;<strong>[항목수=@gCounter]</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <TelerikButton ThemeColor="success" OnClick="@Retrieve_TestData_For_Model" Icon="FontIcon.Search">CPK체크</TelerikButton>&nbsp;&nbsp;&nbsp;&nbsp;
            </CardHeader>

            @************************** PAGE BODY 구성 ***************************************************************
            검사리스트(Grid)        CPK통계(Grid)

            Chart for channel1
            Chart for channel2
            Chart for channel3
            ********************************************************************************************************@

            <CardBody>
                <TelerikTileLayout Columns="6"
                                   ColumnWidth="18%"
                                   RowHeight="210px"
                                   Reorderable="true"
                                   Resizable="true">
                    <TileLayoutItems>
                        <TileLayoutItem HeaderText="@gTargetModel" RowSpan="4" ColSpan="2">
                            <HeaderTemplate>
                                <h4 style="color:blue"><strong>CTQ 값:@gTargetModel&nbsp-@gTargetNumber</strong></h4>
                            </HeaderTemplate>
                            <Content>
                                <TelerikGrid Class="cpk-grid"
                                             Data="@gListCtq"
                                             ConfirmDelete="true"
                                             Pageable="true"
                                             Groupable="false"
                                             Sortable="false"
                                             FilterMode="GridFilterMode.FilterMenu"
                                             Resizable="true"
                                             Reorderable="true"
                                             EditMode="GridEditMode.Popup"
                                             PageSize=@gPageSize
                                             Navigable="true"
                                             Height="100%">

                                    <GridToolBarTemplate>
                                        <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">엑셀 출력</GridCommandButton>
                                    </GridToolBarTemplate>

                                    <GridSettings>
                                        <GridPagerSettings InputType="PagerInputType.Buttons"
                                                           ButtonCount="20"
                                                           Position="PagerPosition.Top">
                                        </GridPagerSettings>
                                    </GridSettings>

                                    <GridExport>
                                        <GridExcelExport FileName="@gStrFilename" AllPages="true" />
                                    </GridExport>

                                    <GridColumns>
                                        <GridColumn Field=@nameof(CPK_Items.sn) Width="30px" Title="SN" Sortable=true />
                                        <GridColumn Field=@nameof(CPK_Items.workdate) Width="60px" Title="검사날짜" Sortable=true />
                                        <GridColumn Field=@nameof(CPK_Items.value1) Width="30px" Title="CH1값" Sortable=true />
                                        <GridColumn Field=@nameof(CPK_Items.value2) Width="30px" Title="CH2값" Sortable=true />
                                        <GridColumn Field=@nameof(CPK_Items.value3) Width="30px" Title="CH3값" Sortable=true />

                                    </GridColumns>
                                </TelerikGrid>
                            </Content>
                        </TileLayoutItem>
                        <TileLayoutItem HeaderText="CPK 통계" RowSpan="1" ColSpan="4">
                            <HeaderTemplate>
                                <h4 style="color:red"><strong>CPK 통계:@gTargetModel&nbsp-@gTargetNumber</strong></h4>
                            </HeaderTemplate>
                            <Content>
                                <TelerikGrid Data="@gCpkStats"
                                             @ref="@GridRef"
                                             Pageable="false"
                                             Sortable="true"
                                             FilterMode="@GridFilterMode.None"
                                             OnRowDoubleClick="@OnCpkRowDoubleClickHandler"
                                             Height="100%">
                                    <GridExport>
                                        <GridExcelExport FileName="@gStrCpkFilename" AllPages="true" />
                                    </GridExport>

                                    <GridColumns>
                                        <GridColumn Field=@nameof(CPK_Statistics.name) Width="30px" Title="Channel" Sortable=true />
                                        <GridColumn Field=@nameof(CPK_Statistics.num) Width="30px" Title="검사수" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.average) Width="30px" Title="평균" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" HeaderClass="k-justify-content-center demo-font-weight-bold" />
                                        <GridColumn Field=@nameof(CPK_Statistics.stddev) Width="30px" Title="표준편차" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.min) Width="30px" Title="최소값" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.max) Width="30px" Title="최대값" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.numGood) Width="30px" Title="양품수" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.cp) Width="30px" Title="Cp" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.cpk) Width="30px" Title="Cpk" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right"
                                                    OnCellRender="@OnCellRenderHandler" />
                                        <GridColumn Field=@nameof(CPK_Statistics.lcl) Width="30px" Title="LCL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.ucl) Width="30px" Title="UCL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.lsl) Width="30px" Title="LSL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                        <GridColumn Field=@nameof(CPK_Statistics.usl) Width="30px" Title="USL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                    </GridColumns>
                                    <GridToolBarTemplate>
                                        <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">엑셀 출력</GridCommandButton>
                                    </GridToolBarTemplate>

                                </TelerikGrid>

                            </Content>
                        </TileLayoutItem>

                        <TileLayoutItem HeaderText="CPK 그래프" RowSpan="3" ColSpan="4">
                            <HeaderTemplate>
                                <h4 style="color:green"><strong>CPK 그래프:@gTargetModel&nbsp-@gTargetNumber</strong></h4>
                            </HeaderTemplate>
                            <Content>

                                @for (int i = 0; i < 3; i++)
                                {
                                    var li = i;
                                    <TelerikChart Height="30%">
                                        <ChartLegend Visible="true"></ChartLegend>
                                        <ChartSeriesItems>

                                            @if (@gChVisible[li])
                                            {
                                                @if (li == 0)
                                                {
                                                    <ChartSeries Type="ChartSeriesType.Line"
                                                                 Name="CTQ 측정값"
                                                                 Data="@gListCtq"
                                                                 Color="@gColorValues[li]"
                                                                 Field="@gChannelValues[li]">
                                                        <ChartSeriesMarkers Size="4" />
                                                        <ChartSeriesTooltip Visible="true">
                                                            <Template Context="ctx">
                                                                SN=@((ctx.DataItem as CPK_Items).sn)
                                                                <br />
                                                                검사날짜=@((ctx.DataItem as CPK_Items).workdate)
                                                                <br />
                                                                값="@((ctx.DataItem as CPK_Items).value1)"
                                                            </Template>
                                                        </ChartSeriesTooltip>
                                                    </ChartSeries>
                                                }
                                                else if (li == 1)
                                                {
                                                    <ChartSeries Type="ChartSeriesType.Line"
                                                                 Name="CTQ 측정값"
                                                                 Data="@gListCtq"
                                                                 Color="@gColorValues[li]"
                                                                 Field="@gChannelValues[li]">
                                                        <ChartSeriesMarkers Size="4" />
                                                        <ChartSeriesTooltip Visible="true">
                                                            <Template Context="ctx">
                                                                SN=@((ctx.DataItem as CPK_Items).sn)
                                                                <br />
                                                                검사날짜=@((ctx.DataItem as CPK_Items).workdate)
                                                                <br />
                                                                값="@((ctx.DataItem as CPK_Items).value2)"
                                                            </Template>
                                                        </ChartSeriesTooltip>
                                                    </ChartSeries>
                                                }
                                                else
                                                {
                                                    <ChartSeries Type="ChartSeriesType.Line"
                                                                 Name="CTQ 측정값"
                                                                 Data="@gListCtq"
                                                                 Color="@gColorValues[li]"
                                                                 Field="@gChannelValues[li]">
                                                        <ChartSeriesMarkers Size="4" />
                                                        <ChartSeriesTooltip Visible="true">
                                                            <Template Context="ctx">
                                                                SN=@((ctx.DataItem as CPK_Items).sn)
                                                                <br />
                                                                검사날짜=@((ctx.DataItem as CPK_Items).workdate)
                                                                <br />
                                                                값=@((ctx.DataItem as CPK_Items).value3)
                                                            </Template>
                                                        </ChartSeriesTooltip>
                                                    </ChartSeries>
                                                }
                                            }
                                            else
                                            {
                                                <ChartSeries Type="ChartSeriesType.Line"
                                                             Name="CTQ 측정값"
                                                             Data="@gListCtqBlank"
                                                             Color=@gColorValues[li]
                                                             Field=@gChannelValues[li]>
                                                </ChartSeries>
                                            }
                                        </ChartSeriesItems>

                                        <ChartValueAxes>
                                            <ChartValueAxis Min="@gyMin[li]" Max="@gyMax[li]">
                                                <ChartValueAxisTitle Text="@gChNames[li]" />
                                                <ChartValueAxisMajorGridLines Visible="true" />
                                                <ChartValueAxisPlotBands>
                                                    <ChartValueAxisPlotBand From="@gyAvg[li]" To="@gyAvg2[li]" Color="green" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gy3SigL[li]" To="@gy3SigH[li]" Color="yellow" Opacity="0.3"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChLcl[li]" To="@gChLcl2[li]" Color="cyan" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChUcl[li]" To="@gChUcl2[li]" Color="cyan" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChLsl[li]" To="@gChLsl2[li]" Color="red" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChUsl[li]" To="@gChUsl2[li]" Color="red" Opacity="0.9"></ChartValueAxisPlotBand>
                                                </ChartValueAxisPlotBands>
                                            </ChartValueAxis>
                                        </ChartValueAxes>
                                        <ChartCategoryAxes>
                                            <ChartCategoryAxis Categories="@gXAxisLabels">
                                                <ChartCategoryAxisLabels Step="@gStep" />
                                            </ChartCategoryAxis>
                                        </ChartCategoryAxes>
                                    </TelerikChart>
                                }
                            </Content>
                        </TileLayoutItem>
                    </TileLayoutItems>
                </TelerikTileLayout>
            </CardBody>
        </TelerikCard>

        @******************* 정규분포/XR 윈도우 Popup ********************@
        <TelerikWindow Visible="@IsWindowVisible"
                       VisibleChanged="@XRWindowShowChangedHandler"
                       Resizable="false"
                       Modal="true"
                       MinHeight="200px"
                       Height="800px"
                       MaxHeight="1024px"
                       MinWidth="400px"
                       Width="1600px"
                       MaxWidth="1920px">
            <WindowTitle>
                @XRWindowTitle
            </WindowTitle>
            <WindowActions>
                <WindowAction Name="Close" />
            </WindowActions>
            <WindowContent>
                <TelerikTileLayout Columns="6"
                                   ColumnWidth="18%"
                                   RowHeight="200px"
                                   Reorderable="true"
                                   Resizable="true">
                    <TileLayoutItems>

                        <TileLayoutItem HeaderText="정규분포" RowSpan="3" ColSpan="3">
                            <HeaderTemplate>
                                <h4 style="color:green"><strong>정규분포 : @gTargetModel&nbsp-@gTargetNumber</strong></h4>
                            </HeaderTemplate>
                            <Content>
                                <TelerikChart Height="96%" Width="100%" @ref="theChart">
                                    <ChartTooltip Visible="false" Shared="true"></ChartTooltip>
                                    <ChartLegend Visible="false"></ChartLegend>
                                    <ChartSeriesItems>
                                        <ChartSeries Type="ChartSeriesType.Line"
                                                     Name="Value1"
                                                     Data="@gNormalValue"
                                                     Color="blue"
                                                     Field="@nameof(CPK_NormalDist.value1)" CategoryField="@nameof(CPK_NormalDist.value2)">
                                            @*
                                            <ChartSeriesLabels Template="#=value#" Visible="true" Color="blue" Background="#FF000000"></ChartSeriesLabels>
                                            *@
                                            <ChartSeriesMarkers Size="-1">
                                                <ChartSeriesMarkersBorder Width="-1"></ChartSeriesMarkersBorder>
                                            </ChartSeriesMarkers>

                                        </ChartSeries>
                                    </ChartSeriesItems>

                                    <ChartTitle Text="@gTargetModel">
                                        <ChartSubtitle Text="@gNormalSubtitle"></ChartSubtitle>
                                    </ChartTitle>

                                    <ChartCategoryAxes>
                                        <ChartCategoryAxis>
                                            <ChartCategoryAxisPlotBands>
                                                <ChartCategoryAxisPlotBand From="@gGraphLsl" To="gGraphLsl" Color="red" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                                <ChartCategoryAxisPlotBand From="@gGraphLcl" To="gGraphLcl" Color="cyan" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                                <ChartCategoryAxisPlotBand From="@gGraphAvg" To="@gGraphAvg" Color="green" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                                <ChartCategoryAxisPlotBand From="@gSigma3L" To="gSigma3U" Color="yellow" Opacity="0.3"></ChartCategoryAxisPlotBand>
                                                <ChartCategoryAxisPlotBand From="@gGraphUcl" To="gGraphUcl" Color="cyan" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                                <ChartCategoryAxisPlotBand From="@gGraphUsl" To="gGraphUsl" Color="red" Opacity="1.0"></ChartCategoryAxisPlotBand>
                                            </ChartCategoryAxisPlotBands>
                                            <ChartCategoryAxisLabels Step="20" />
                                        </ChartCategoryAxis>
                                    </ChartCategoryAxes>

                                </TelerikChart>
                                <h6 style="color:blue"><strong>@gNormalSubtitle</strong></h6>
                            </Content>
                        </TileLayoutItem>

                        <TileLayoutItem HeaderText="X-R 관리도" RowSpan="3" ColSpan="3">
                            <HeaderTemplate>
                                <h5 style="color:green"><strong>X-R 관리도: @gTargetModel&nbsp-@gTargetNumber</strong></h5>
                            </HeaderTemplate>
                            <Content>
                                <TelerikChart Height="96%" Width="100%" @ref="theChartXR">
                                    <ChartLegend Visible="false"></ChartLegend>
                                    <ChartSeriesItems>
                                        @{
                                            string strField = "value1";

                                            @if (@giSelectedCh == 1)
                                            {
                                                <ChartSeries Type="ChartSeriesType.Line"
                                                             Name="CTQ-측정값"
                                                             Data="@gListCtq"
                                                             Color="blue"
                                                             Field="@strField">
                                                    <ChartSeriesMarkers Size="3" />
                                                    <ChartSeriesTooltip Visible="true">
                                                        <Template Context="ctx">
                                                            SN=@((ctx.DataItem as CPK_Items).sn)
                                                            <br />
                                                            검사날짜=@((ctx.DataItem as CPK_Items).workdate)
                                                            <br />
                                                            값 = @((ctx.DataItem as CPK_Items).value1);
                                                        </Template>
                                                    </ChartSeriesTooltip>
                                                </ChartSeries>
                                            }
                                            else if (giSelectedCh == 2)
                                            {
                                                strField = "value2";
                                                <ChartSeries Type="ChartSeriesType.Line"
                                                             Name="CTQ-측정값"
                                                             Data="@gListCtq"
                                                             Color="blue"
                                                             Field="@strField">
                                                    <ChartSeriesMarkers Size="3" />
                                                    <ChartSeriesTooltip Visible="true">
                                                        <Template Context="ctx">
                                                            SN=@((ctx.DataItem as CPK_Items).sn)
                                                            <br />
                                                            검사날짜=@((ctx.DataItem as CPK_Items).workdate)
                                                            <br />
                                                            값 = @((ctx.DataItem as CPK_Items).value2);
                                                        </Template>
                                                    </ChartSeriesTooltip>
                                                </ChartSeries>
                                            }
                                            else
                                            {
                                                strField = "value3";
                                                <ChartSeries Type="ChartSeriesType.Line"
                                                             Name="CTQ-측정값"
                                                             Data="@gListCtq"
                                                             Color="blue"
                                                             Field="@strField">
                                                    <ChartSeriesMarkers Size="3" />
                                                    <ChartSeriesTooltip Visible="true">
                                                        <Template Context="ctx">
                                                            SN=@((ctx.DataItem as CPK_Items).sn)
                                                            <br />
                                                            검사날짜=@((ctx.DataItem as CPK_Items).workdate)
                                                            <br />
                                                            값 = @((ctx.DataItem as CPK_Items).value3);
                                                        </Template>
                                                    </ChartSeriesTooltip>
                                                </ChartSeries>
                                            }
                                        }
                                    </ChartSeriesItems>

                                    <ChartTitle Text="@gTargetModel">
                                        <ChartSubtitle Text="@gNormalSubtitle"></ChartSubtitle>
                                    </ChartTitle>

                                    <ChartValueAxes>
                                        @{
                                            int li = giSelectedCh - 1;
                                            <ChartValueAxis Min="@gyMin[li]" Max="@gyMax[li]">
                                                <ChartValueAxisTitle Text="@gChNames[li]" />
                                                <ChartValueAxisMajorGridLines Visible="true" />
                                                <ChartValueAxisPlotBands>
                                                    <ChartValueAxisPlotBand From="@gyAvg[li]" To="@gyAvg2[li]" Color="green" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gy3SigL[li]" To="@gy3SigH[li]" Color="yellow" Opacity="0.3"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChLcl[li]" To="@gChLcl2[li]" Color="cyan" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChUcl[li]" To="@gChUcl2[li]" Color="cyan" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChLsl[li]" To="@gChLsl2[li]" Color="red" Opacity="0.9"></ChartValueAxisPlotBand>
                                                    <ChartValueAxisPlotBand From="@gChUsl[li]" To="@gChUsl2[li]" Color="red" Opacity="0.9"></ChartValueAxisPlotBand>
                                                </ChartValueAxisPlotBands>
                                            </ChartValueAxis>

                                            @*
                                        <ChartValueAxis Min="@yMin" Max="@yMax">
                                        <ChartValueAxisPlotBands>
                                        <ChartValueAxisPlotBand From="@y3SigL" To="@y3SigU" Color="#ffff00" Opacity="0.1"></ChartValueAxisPlotBand>
                                        <ChartValueAxisPlotBand From="@yCL1" To="@yCL2" Color="black" Opacity="0.9"></ChartValueAxisPlotBand>
                                        <ChartValueAxisPlotBand From="@yCU1" To="@yCU2" Color="black" Opacity="0.9"></ChartValueAxisPlotBand>
                                        <ChartValueAxisPlotBand From="@yAvg1" To="@yAvg2" Color="green" Opacity="0.5"></ChartValueAxisPlotBand>
                                        </ChartValueAxisPlotBands>
                                        </ChartValueAxis>
                                        *@
                                        }
                                    </ChartValueAxes>

                                </TelerikChart>
                                <h6 style="color:blue"><strong>@gNormalSubtitle</strong></h6>
                            </Content>
                        </TileLayoutItem>

                    </TileLayoutItems>

                </TelerikTileLayout>
            </WindowContent>
        </TelerikWindow>

    </Authorized>
</AuthorizeView>
@************************** 프로그램 CODE ***************************************************************
        구조체 정의:         CPK_Items, CPK_Statistics,
********************************************************************************************************@
@code {
    //--- 검사항목 List 구조체
    public class CPK_Items
    {
        public string sn { get; set; }
        public DateTime workdate { get; set; }
        public float value1 { get; set; }
        public float value2 { get; set; }
        public float value3 { get; set; }
        public int ix { get; set; }
    };

    public class CPK_ItemsNew
    {
        public string sn { get; set; }
        public DateTime workdate { get; set; }
        public string value1 { get; set; }
        public string value2 { get; set; }
        public string value3 { get; set; }
        public int ix { get; set; }
    };
    //--- CPK 통계 구조체
    public class CPK_Statistics
    {
        public string name { get; set; }
        public int num { get; set; }
        public int numSpecIn { get; set; }
        public int numGood { get; set; }
        public double average { get; set; }
        public double stddev { get; set; }
        public double sum { get; set; }

        public double min { get; set; }
        public double max { get; set; }
        public double cp { get; set; }
        public double cpk { get; set; }

        public string lcl { get; set; }
        public string ucl { get; set; }
        public string lsl { get; set; }
        public string usl { get; set; }
    };

    //--- Data For Combobox : Model, TestNo, Channel#
    private List<string> gModelNames = new List<string>();
    private List<string> gTestNumbers { get; set; } = new List<string>();

    //--- For GridData/ChartData
    public List<CPK_Items> gListCtq { get; set; } = new List<CPK_Items>();
    public List<CPK_Items> gListCtqBlank { get; set; } = new List<CPK_Items>();

    //--- For GridData
    private TelerikGrid<CPK_Statistics> GridRef { get; set; }   // 검색후 Ctq List Rebind하기 위해 (시간차로 표시 안될 수 있기 때문에)
    public List<CPK_Statistics> gCpkStats { get; set; }         // Cpk통계 Grid에 표시할 값


    //--- 검색 기간 : 2023~2030 사이
    private DateTime gMinYear = new DateTime(2023, 1, 1, 0, 0, 0);
    private DateTime gMaxYear = new DateTime(2030, 1, 1, 0, 0, 0);
    private DateTime gStartYear = DateTime.Now;
    private DateTime gEndYear = DateTime.Now;

    private string gTargetModel = "";
    private string gTargetNumber = "";
    private int gTargetOnlyNumber = 0;
    private bool gSetDuration = false;
    private int gCounter = 0;

    public int gSpanYear = 0;
    public int gPageSize = 100;
    string gLastSelectedModel = "";
    private string gUserId = "";

    //--- TestNo 콤보박스에 대한 변수
    public TelerikComboBox<string, string> ComboBoxRef { get; set; }

    //--- For Excel Export
    bool ExportAllPages { get; set; }
    string gStrFilename { get; set; } = "CtqList";   // exported excel filename : CtqList_ModelName_TestNumber_yyyy-mm-dd_HH.mm.ss.xlsx
    string gStrCpkFilename { get; set; } = "cpk통계";
    //--- For Loop in Charts
    public string[] gXAxisLabels = new string[100];

    // lcl/ucl, lsl,usl
    double[] gChLcl = new double[3];    // 검은색
    double[] gChLcl2 = new double[3];
    double[] gChUcl = new double[3];    // 검은색
    double[] gChUcl2 = new double[3];
    double[] gChLsl = new double[3];
    double[] gChLsl2 = new double[3];   // 빨간색
    double[] gChUsl = new double[3];
    double[] gChUsl2 = new double[3];
    double[] gyMin = new double[3];
    double[] gyMax = new double[3];
    double[] gyAvg = new double[3];     // 배경색 Green 각 채널의 평균값 - 범위/500
    double[] gyAvg2 = new double[3];
    double[] gy3SigL = new double[3];   // 배경색 노랑
    double[] gy3SigH = new double[3];

    string[] gChNames = new string[3] { "Ch-1", "Ch-2", "Ch-3" };
    string[] gColorValues = new string[3] { "red", "blue", "green" };
    string[] gChannelValues = new string[3] { "value1", "value2", "value3" };
    bool[] gChVisible = new bool[3] { true, true, true };

    double gStep = 10;

    //======================================================================
    //--- Window
    //###### 정규분포용 구조체
    public class CPK_NormalDist
    {
        public string xCategory { get; set; }
        public double value1 { get; set; }
        public double value2 { get; set; }
        public double value3 { get; set; }
    };
    private List<CPK_NormalDist> gNormalValue { get; set; } = new List<CPK_NormalDist>();

    public bool IsWindowVisible { get; set; } = false;
    private string XRWindowTitle = "정규분포/XR 그래프";
    Telerik.Blazor.Components.TelerikChart theChart { get; set; }
    Telerik.Blazor.Components.TelerikChart theChartXR { get; set; }

    double gChAvg = 0;
    double gChStdDev = 0;
    private int giSelectedCh = 1;
    private string gNormalSubtitle = "평균=-, 표준편차=-";

    //--- For X축 : index로 변환
    public double gGraphLcl = 0;
    public double gGraphUcl = 0;
    public double gGraphLsl = 0;
    public double gGraphUsl = 0;
    public double gGraphAvg = 0;
    public double gSigma1L = 0;
    public double gSigma1U = 0;
    public double gSigma2L = 0;
    public double gSigma2U = 0;
    public double gSigma3L = 0;
    public double gSigma3U = 0;

    void OnCellRenderHandler(GridCellRenderEventArgs args)
    {
        var item = args.Item as CPK_Statistics;

        if (item.cpk < 1.33)
        {
            args.Class = "cpkNotGood";
        }
        else
        {
            args.Class = "cpkGood";
        }
    }

    //======================================================================
    //     초기화 : excel filename 지정, 기본기간지정, 변수 초기화, 해당 ModelName 추출
    protected override async Task OnInitializedAsync()
    {
        var user = await _userManager.GetUserAsync(_httpContextAccessor.HttpContext.User);
        gUserId = user.UserName;

        gStartYear = gEndYear.AddMonths(-12);

        //--- Get Configuration
        var temp = await LoadConfiguration();// In 0.9.9 var
        StateHasChanged();

        gCpkStats = new List<CPK_Statistics>();
        List_Models();

        if (string.IsNullOrWhiteSpace(gTargetModel) ||
            string.IsNullOrWhiteSpace(gTargetNumber))
            return;

        Retrieve_TestData_For_Model();

    }

    //======================================================================
    //      Cpk관리할 Model 이름 List를 DB에서 읽어 온다.
    private void List_Models()
    {
        gModelNames = cpkService.GetCpkModelNames(10);

        //--- 첫번째 모델, 첫번째 TestNo 설정
        if (gModelNames.Count != 0)
        {
            // Get Saved Data : Duration, 모델, 테스트번호
            //gTargetModel = gModelNames[0];
            Refresh_TestNo_For_Model(gTargetModel);
        }
    }

    // ======================================================================
    //      모델이 변경되면, 해당 모델의 TestNo List를 새로 가져온다.
    private async void ModelChangeHandler(object theUserInput)
    {
        if (theUserInput == null)
            return;

        string selectedModel = theUserInput.ToString();
        Refresh_TestNo_For_Model(selectedModel);
    }

    // ======================================================================
    //      모델이 변경되면, 해당 모델의 TestNo List를 새로 가져온다.
    private void Refresh_TestNo_For_Model(string selectedModel)
    {
        if (string.IsNullOrWhiteSpace(selectedModel))
            return;

        if (selectedModel == gLastSelectedModel)
            return;

        gLastSelectedModel = selectedModel;

        //--- Check Test Items
        gTestNumbers.Clear();
        using (var db = new FimsDbContext())
        {
            var lists = db.CpkItems.Where(n => gLastSelectedModel.Contains(n.Model) == true).OrderBy(n => n.TestNo).Select(p => p.TestNo).ToList();

            List<int> temp = lists.ToList();
            if (temp.Count() <= 0)
                return;
            foreach (var tno in temp)
            {
                gTestNumbers.Add("(" + tno + "):" + db.TspecItems.Where(x => x.TestNo == tno).Select(p => p.Title).FirstOrDefault());
            }

            gTargetNumber = gTestNumbers[0];
        }

        ComboBoxRef?.Rebind();

        Retrieve_TestData_For_Model();
    }

    // ======================================================================
    //-- Need Model Name, Test#, ChannelNo
    //     1) DB에서 해당Model, 해당TestNo에 대한 검사 data를 추출한다. (gListCtq)
    //     2) 계산 : gCpkStats 값 채움. 항목수, 평균, 표준편차, 최대/최소,
    private void Retrieve_TestData_For_Model()
    {
        //--- Model이나 TestNo가 지정되어야만 한다.
        if (gTargetModel == null || gTargetModel.Length < 3 ||
            gTargetNumber == null || gTargetNumber.Length < 3)
        {
            Alert("Model, TestNo를 선택해야 합니다");
            return;
        }

        //--- TestNo 콤보박스에는 Test#+TestName이 들어가 있다. Test#만 추출한다. 통계 data 계산할때 필요.
        string strTargetNo = gTargetNumber.Substring(gTargetNumber.IndexOf("(") + 1, gTargetNumber.IndexOf(")") - 1);
        gTargetOnlyNumber = int.Parse(strTargetNo);

        gListCtq = new();       // clear
        //--- 1) DB에서 해당Model, 해당TestNo에 대한 검사 data를 추출한다. (ch1~3 값이 모두 0인 것은 제외한다.)
        using (var db = new FimsDbContext())
        {
            List<CPK_ItemsNew> listTempCpk = new();

            if (gSetDuration == false) // 날짜 무시
            {
                /*
                gListCtq = (from sheet in db.Tsheets
                                from item in db.Titems
                                orderby sheet.InspectionEndDateTime
                            where sheet.ProductModel == gTargetModel &&
                            sheet.Id == item.TsheetId &&
                            item.TestNo == gTargetOnlyNumber
                            select new CPK_Items
                            {
                                sn = sheet.ProductSerial,
                                workdate = sheet.InspectionEndDateTime,
                                value1 = StringToFloatValue(item.Ch1Data),
                                value2 = StringToFloatValue(item.Ch2Data),
                                value3 = StringToFloatValue(item.Ch3Data)
                                }).ToList();
                */
                listTempCpk = (from sheet in db.Tsheets
                                from item in db.Titems
                                orderby sheet.InspectionEndDateTime
                                where sheet.ProductModel == gTargetModel &&
                                    sheet.Id == item.TsheetId &&
                                    item.TestNo == gTargetOnlyNumber
                                select new CPK_ItemsNew
                                   {
                                       sn = sheet.ProductSerial,
                                       workdate = sheet.InspectionEndDateTime,
                                       value1 = item.Ch1Data,
                                       value2 = item.Ch2Data,
                                       value3 = item.Ch3Data
                                   }).ToList();
            }
            else
            {
                string strStartDate = gStartYear.ToString("yyyy-MM-dd");
                string strEndDate = gEndYear.ToString("yyyy-MM-dd");

                listTempCpk = (from sheet in db.Tsheets
                            from item in db.Titems
                            orderby sheet.InspectionEndDateTime
                            where sheet.ProductModel == gTargetModel &&
                                 sheet.Id == item.TsheetId &&
                                 item.TestNo == gTargetOnlyNumber &&
                                 sheet.InspectionEndDateTime >= gStartYear &&
                                 sheet.InspectionEndDateTime <= gEndYear
                            select new CPK_ItemsNew
                                   {
                                       sn = sheet.ProductSerial,
                                       workdate = sheet.InspectionEndDateTime,
                                       value1 = item.Ch1Data,
                                       value2 = item.Ch2Data,
                                       value3 = item.Ch3Data
                                   }).ToList();
            }

            foreach (var aa in listTempCpk)
            {
                CPK_Items ci = new();
                ci.sn = aa.sn;
                ci.workdate = aa.workdate;
                ci.value1 = StringToFloatValue(aa.value1);
                ci.value2 = StringToFloatValue(aa.value2);
                ci.value3 = StringToFloatValue(aa.value3);
                gListCtq.Add(ci);
            }

            gListCtq = gListCtq.Where(x => x.value1 != 0 || x.value2 != 0 || x.value3 != 0).ToList();
            gCounter = gListCtq.Count();

            gXAxisLabels = new string[gCounter];
            for (int k = 1; k <= gCounter; k++)
                gXAxisLabels[k - 1] = k.ToString();

            if (gCounter <= 100)
                gStep = 10;
            else if (gCounter < 500)
                gStep = 20;
            else
                gStep = 30;

            //----------------------------------------------------------------------------------------------
            //--- 2) 계산 : gCpkStats 값 채움. 항목수, 평균, 표준편차, 최대/최소,
            CPK_Statistics record;

            gCpkStats.Clear();
            for (int k = 0; k < 3; k++)
                gChVisible[k] = false;

            record = GetStatistics(1, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gChVisible[0] = true;
            }

            record = GetStatistics(2, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gChVisible[1] = true;
            }

            record = GetStatistics(3, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gChVisible[2] = true;
            }

            GridRef?.Rebind();
        }

        gStrFilename = "CtqList_" + gTargetModel + "_" + gTargetNumber + "_" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss");
        gStrCpkFilename = "Cpk통계_" + gTargetModel + "_" + gTargetNumber + "_" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss");

        SaveConfiguration();// In 0.9.9
    }

    float StringToFloatValue(string? svalue)
    {
        float fRet = 0.0f;
        if (svalue == null)
            return fRet;

        fRet = float.TryParse(svalue, out var temp) ? temp : 0.0f;
        fRet = (float)Math.Round(fRet, 3);
        return fRet;
    }

    //======================================================================
    //--- 특정 채널 data에 대해 각종 통계값 계산
    //    (평균, 최소, 최대, 표준편차, 합계, lsl, usl, lcl, ucl)
    //--- Sample 수가 30개가 넘는 경우에
    //    (cp, cpk, 양품수) (chart에 표시할 lcl/ucl값 = gChxLcl/gChxUcl)
    private CPK_Statistics GetStatistics(int ixCh, List<CPK_Items> cpkitems)
    {
        int ix = ixCh - 1;  // index from 0

        List<float> items;

        if (ixCh == 1)
        {
            items = cpkitems.Select(n => n.value1).ToList();
        }
        else if (ixCh == 2)
        {
            items = cpkitems.Select(n => n.value2).ToList();
        }
        else if (ixCh == 3)
        {
            items = cpkitems.Select(n => n.value3).ToList();
        }
        else
        {
            return null;
        }

        string strLSL = "";
        string strUSL = "";
        double dl, du, dlc, duc;
        double dspan = 0;
        double dspansl = 0;
        CPK_Statistics record = new CPK_Statistics();

        record.name = "Ch-" + ixCh.ToString();
        record.num = items.Count();
        if (record.num >= 10)
        {
            record.average = items.Average();
            record.min = items.Min();
            record.max = items.Max();
            record.stddev = getStandardDeviation(items);
            record.sum = items.Sum();

            //--- get lsl,usl, lcl, ucl
            cpkService.GetSL(gTargetModel, gTargetOnlyNumber, ixCh, ref strLSL, ref strUSL);
            record.lsl = strLSL;
            record.usl = strUSL;
            try
            {
                dl = double.Parse(record.lsl ?? "0");
                du = double.Parse(record.usl ?? "0");

            }
            catch (Exception ex)
            {
                dl = 0;
                du = 0;
            }

            //--- y축 min/max : 4std ==> lsl-10%, usl+10%
            dspansl = du - dl;
            //gyMin[ix] = Math.Round(record.average - 4 * record.stddev, 2);
            //gyMax[ix] = Math.Round(record.average + 4 * record.stddev, 2);
            gyMin[ix] = Math.Round(dl - dspansl * 0.1, 2);
            gyMax[ix] = Math.Round(du + dspansl * 0.1, 2);
            dspan = (gyMax[ix] - gyMin[ix]) / 200;  // 그래프 표시할 폭

            gy3SigL[ix] = record.average - 3 * record.stddev;
            gy3SigH[ix] = record.average + 3 * record.stddev;
            gyAvg[ix] = record.average - dspan;
            gyAvg2[ix] = record.average + dspan;


            gChLsl[ix] = dl - dspan;
            gChUsl[ix] = du - dspan;
            gChLsl2[ix] = dl + dspan;
            gChUsl2[ix] = du + dspan;

            cpkService.GetCL(gTargetModel, gTargetOnlyNumber, ixCh, ref strLSL, ref strUSL);
            record.lcl = strLSL;
            record.ucl = strUSL;

            if (record.sum != 0)
            {
                // LCL/UCL을 사용하여 cpk 계산하려면 comment를 풀어야 한다.

                dl = double.Parse(record.lcl ?? "0");
                du = double.Parse(record.ucl ?? "0");

                gChLcl[ix] = dl - dspan;
                gChUcl[ix] = du - dspan;
                gChLcl2[ix] = dl + dspan;
                gChUcl2[ix] = du + dspan;

                //--- cpk, cp 계산
                //    Cp = (UCL-LCL)/(6*표준편차)
                //    Cpk = MIN( (평균-LSL)/(3*표준편차), (USL-평균)/(3*표준편차))
                record.cp = (du - dl) / (6 * record.stddev);
                double cpk1 = (record.average - dl) / (3 * record.stddev);
                double cpk2 = (du - record.average) / (3 * record.stddev);
                record.cpk = Math.Min(cpk1, cpk2);

                float fdl = (float)dl;
                float fdu = (float)du;
                record.numGood = items.Where(x => x >= fdl && x <= fdu).Count();

            }
            else
            {
                gChLcl[ix] = 0;
                gChUcl[ix] = 0;
                gChLcl2[ix] = 0;
                gChUcl2[ix] = 0;
                gy3SigL[ix] = 0;
                gy3SigH[ix] = 0;
                gyAvg[ix] = 0;
                gyAvg2[ix] = 0;
            }
        }

        return record;
    }

    //======================================================================
    //--- 표준편차 계산
    private float getStandardDeviation(List<float> floatList)
    {
        float average = floatList.Average();
        float sumOfDerivation = 0;
        foreach (float value in floatList)
        {
            sumOfDerivation += (value) * (value);
        }
        double sumOfDerivationAverage = sumOfDerivation / floatList.Count;
        return (float)Math.Sqrt(sumOfDerivationAverage - (average * average));
    }

    //======================================================================
    //--- 경고 Message 표시
    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message); // Alert
    }

    //======================================================================
    // For Window
    private void XRWindowShowChangedHandler(bool currVisible)
    {
        IsWindowVisible = currVisible;
        if (currVisible == false)
        {
            NavManager.NavigateTo("/cpk", false); // 다시 listup
        }
        else
        {
        }
    }

    async Task OnCpkRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var stats = args.Item as CPK_Statistics;

        if (double.IsNaN(stats.cpk) == true)
        {
            Alert("Cpk 계산이 불가합니다.");
            return;
        }

        //--- Get parameters for 정규분포
        giSelectedCh = int.Parse(stats.name.Substring(3, 1));
        gChAvg = Math.Round(stats.average, 3);
        gChStdDev = Math.Round(stats.stddev, 3);
        double dlcl, ducl, dlsl, dusl;

        if (stats.lsl != null)
        {
            dlsl = double.Parse(stats.lsl);
            dusl = double.Parse(stats.usl);
        }
        else
        {
            dlsl = gChAvg - gChStdDev * 5;
            dusl = gChAvg + gChStdDev * 5;
        }

        if (stats.lcl != null)
        {
            dlcl = double.Parse(stats.lcl);
            ducl = double.Parse(stats.ucl);
        }
        else
        {
            dlcl = dlsl;
            ducl = dusl;
        }


        Calculate_Normal_Distribution(gChAvg, gChStdDev, giSelectedCh, dlcl, ducl, dlsl, dusl);

        //--- Show
        XRWindowTitle = "정규분포/XR 그래프 : " + stats.name + ", Avg=" + gChAvg.ToString("#.##") + ", Std=" + gChStdDev.ToString("#.##");
        gNormalSubtitle = "평균=" + gChAvg.ToString("#.##") + ", 표준편차=" + gChStdDev.ToString("#.##")
                          + ",lsl=" + stats.lsl + ", usl=" + stats.usl
                          + ",lcl=" + stats.lcl + ", ucl=" + stats.ucl;
        IsWindowVisible = true;
    }

    private void Calculate_Normal_Distribution(double dAvg, double dStdDev, int iCh, double dlcl, double ducl, double dlsl, double dusl)
    {
        //--- 정규분포 값 계산
        //    입력 : gAvg, gStdDev, point수
        //    계산 : xMin, xMax, step

        int pointCount = 100;
        double span = dusl - dlsl;
        double xMin = dlsl - span * 0.1;// dAvg - 4 * dStdDev;
        double xMax = dusl + span * 0.1;// dAvg + 4 * dStdDev;
        double step = (xMax - xMin) / pointCount;
        int ix = 0;

        gNormalValue.Clear();
        for (double x = xMin; x <= xMax; x += step)
        {
            CPK_NormalDist nd = new CPK_NormalDist();
            nd.value1 = NormalDistribution(x, dAvg, dStdDev);
            nd.xCategory = x.ToString("#.##");
            nd.value2 = ((int)(x * 1000)) / 1000.0;
            gNormalValue.Add(nd);
            ix++;
        }

        gGraphLcl = GetXIndex(xMin, xMax, step, dlcl);
        gGraphUcl = GetXIndex(xMin, xMax, step, ducl);
        gGraphLsl = GetXIndex(xMin, xMax, step, dlsl);
        gGraphUsl = GetXIndex(xMin, xMax, step, dusl);
        gSigma1L = GetXIndex(xMin, xMax, step, dAvg - dStdDev);
        gSigma1U = GetXIndex(xMin, xMax, step, dAvg + dStdDev);
        gSigma2L = GetXIndex(xMin, xMax, step, dAvg - 2 * dStdDev);
        gSigma2U = GetXIndex(xMin, xMax, step, dAvg + 2 * dStdDev);
        gSigma3L = GetXIndex(xMin, xMax, step, dAvg - 3 * dStdDev);
        gSigma3U = GetXIndex(xMin, xMax, step, dAvg + 3 * dStdDev);
        gGraphAvg = GetXIndex(xMin, xMax, step, dAvg);

    }

    //### 정규분포: x에 대한 y값 계산
    private double NormalDistribution(double x, double mean, double stddev)
    {
        double expPart = Math.Exp(-Math.Pow(x - mean, 2) / (2 * Math.Pow(stddev, 2)));
        return (1 / (stddev * Math.Sqrt(2 * Math.PI))) * expPart;
    }

    //### 정규분포: return index of Value in num : dMin~dMax : num
    //             X축은 0~point 수만큼으로 구분 되어 있다. 실제 값에 해당되는 index를 구한다.
    //             sigma1~3 범위를 구하기 위한 것임.
    private double GetXIndex(double dMin, double dMax, double step, double dValue)
    {
        double diff = dValue - dMin;
        double dix = Math.Ceiling(diff / step);
        return dix;
    }

    //=== Save Configuration
    //--- Save Configuration : language
    public async void SaveConfiguration()
    {
        UserConfiguration config = new UserConfiguration();
        config.bDuration = gSetDuration;
        config.dStartDate = gStartYear;
        config.dEndDate = gEndYear;
        config.ModelName = gTargetModel;
        config.TestItem = gTargetNumber;
        config.UserId = gUserId;
        await cfgService.SaveUserConfigAsync(config);
    }
    public async Task<int> LoadConfiguration()
    {
        string userId = gUserId;
        UserConfiguration config = await cfgService.LoadUserConfigAsync(userId);
        if (config != null)
        {
            gSetDuration = config.bDuration;
            gStartYear = config.dStartDate;
            gEndYear = config.dEndDate;
            gTargetModel = config.ModelName;
            gTargetNumber = config.TestItem;
        }

        return 1;
    }

}

<style>
    .cpkNotGood {
        background-color: red;
    }

    .cpkGood {
        background-color: lawngreen;
    }
</style>