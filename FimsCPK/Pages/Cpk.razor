@page "/cpk"

@using FimsCPK.Models;
@using FimsCPK.Services
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;
@inject IJSRuntime JsRuntime
@inject CpkService cpkService

@************************** PAGE TITLE *****************************************************************@
<PageTitle>Fims Dashboard</PageTitle>
<div class="card-header text-lg-center pt-2 pb-2 fw-bold px-9"> FIMS CPK </div>


<TelerikCard>
    @************************** PAGE HEADER 구성 *************************************************************
        기간설정 (년/월~년/월), 모델 선택, 테스트항목 선택,   (채널선택==> 모든 채널 표시), CPK_CHECK 버튼
    ********************************************************************************************************@
    <CardHeader>
        &nbsp;&nbsp;&nbsp
        <label for="myIncludeDate" ThemeColor="success" style="color:red ">&nbsp;&nbsp;&nbsp;기간지정</label>
        <TelerikCheckBox Id="myIncludeDate" @bind-Value="@gSetDuration" />&nbsp;&nbsp
        <TelerikDatePicker Min="@gMinYear" Max="@gMaxYear" @bind-Value="@gStartYear"
                           BottomView="@CalendarView.Month"
        Format="yyyy-MM-dd" Width="120px"></TelerikDatePicker>
        ~
        <TelerikDatePicker @bind-Value="@gEndYear"
        BottomView="@CalendarView.Month"
        Format="yyyy-MM-dd" Width="120px"></TelerikDatePicker>

        <label for="myModel"> &nbsp;&nbsp;&nbsp;&nbsp;모델:</label>
        <TelerikComboBox Data="@gModelNames" Width="200px" @bind-Value="@gTargetModel" OnChange="@ModelChangeHandler"
                         Placeholder="Select Model..." ClearButton="true" Filterable="true">
        </TelerikComboBox>  
        
        <label for="myTestNum"> &nbsp;&nbsp;&nbsp;&nbsp;테스트번호:</label>
        <TelerikComboBox @ref="@ComboBoxRef" 
            Data="@gTestNumbers" Width="300px" @bind-Value="@gTargetNumber"
                         Placeholder="Select Test Item..." ClearButton="true" Filterable="true">
        </TelerikComboBox>

        &nbsp;&nbsp;&nbsp;&nbsp;<strong>[항목수=@gCounter]</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <TelerikButton ThemeColor="success" OnClick="@Retrieve_TestData_For_Model" Icon="FontIcon.Search">CPK체크</TelerikButton>&nbsp;&nbsp;&nbsp;&nbsp;
    </CardHeader>

    @************************** PAGE BODY 구성 ***************************************************************
          검사리스트(Grid)        CPK통계(Grid)
                                 
                                 Chart for channel1
                                 Chart for channel2
                                 Chart for channel3
    ********************************************************************************************************@

    <CardBody>
        <TelerikTileLayout Columns="6"
                           ColumnWidth="18%"
                           RowHeight="200px"
                           Reorderable="true"
                           Resizable="true">
            <TileLayoutItems>
                <TileLayoutItem HeaderText="@gTargetModel"   RowSpan="4" ColSpan="2">
                    <HeaderTemplate>
                        <h4 style="color:blue"><strong>CTQ 값:@gTargetModel&nbsp-@gTargetNumber</strong></h4>
                    </HeaderTemplate>
                    <Content>
                        <TelerikGrid Class="cpk-grid"
                                     Data="@gListCtq"
                                     ConfirmDelete="true"
                                     Pageable="true"
                                     Groupable="false"
                                     Sortable="false"
                                     FilterMode="GridFilterMode.FilterMenu"
                                     Resizable="true"
                                     Reorderable="true"
                                     EditMode="GridEditMode.Popup"
                                     PageSize=@gPageSize
                                     Navigable="true"
                                     Height="100%">

                            <GridToolBarTemplate>
                                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
                            </GridToolBarTemplate>

                            <GridSettings>
                                <GridPagerSettings InputType="PagerInputType.Buttons"
                                                   ButtonCount="20"
                                                   Position="PagerPosition.Top">
                                </GridPagerSettings>
                            </GridSettings>

                            <GridExport>
                                <GridExcelExport FileName="@gStrFilename" AllPages="true" />
                            </GridExport>

                            <GridColumns>
                                <GridColumn Field=@nameof(CPK_Items.sn) Width="30px" Title="SN" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.workdate) Width="60px" Title="검사날짜" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.value1) Width="30px" Title="CH1값" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.value2) Width="30px" Title="CH2값" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Items.value3) Width="30px" Title="CH3값" Sortable=true />

@*
                                <GridColumn Field=@nameof(Tsheet.ProductSerial) Width="30px" Title="SN" Sortable=true />
                                <GridColumn Field=@nameof(Tsheet.InspectionEndDateTime) Width="40px" Title="검사날짜" Sortable=true />
                                <GridColumn Field=@nameof(Tsheet.InspectorName) Width="30px" Title="값" Sortable=true />
*@
                            </GridColumns>

                        </TelerikGrid>
                    </Content>
               </TileLayoutItem>

                <TileLayoutItem HeaderText="CPK 통계" RowSpan="1" ColSpan="4">
                    <HeaderTemplate>
                        <h4 style="color:red"><strong>CPK 통계:@gTargetModel&nbsp-@gTargetNumber</strong></h4>
                    </HeaderTemplate>
                    <Content>
                        <TelerikGrid Data="@gCpkStats"
                                     @ref="@GridRef"
                                     Pageable="false"
                                     Sortable="true"
                                     FilterMode="@GridFilterMode.None"
                                     Height="100%">

                            <GridColumns>
                                <GridColumn Field=@nameof(CPK_Statistics.name) Width="30px" Title="Channel" Sortable=true />
                                <GridColumn Field=@nameof(CPK_Statistics.num) Width="30px" Title="검사수" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.average) Width="30px" Title="평균" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" HeaderClass="k-justify-content-center demo-font-weight-bold" />
                                <GridColumn Field=@nameof(CPK_Statistics.stddev) Width="30px" Title="표준편차" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.min) Width="30px" Title="최소값" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.max) Width="30px" Title="최대값" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.numGood) Width="30px" Title="양품수" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.cp) Width="30px" Title="Cp" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.cpk) Width="30px" Title="Cpk" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.lcl) Width="30px" Title="LCL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.ucl) Width="30px" Title="UCL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.lsl) Width="30px" Title="LSL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                                <GridColumn Field=@nameof(CPK_Statistics.usl) Width="30px" Title="USL" DisplayFormat="{0:0.00}" TextAlign="@ColumnTextAlign.Right" />
                            </GridColumns>
                        </TelerikGrid>
                    </Content>
                </TileLayoutItem>
                
                <TileLayoutItem HeaderText="CPK 그래프" RowSpan="3" ColSpan="4">
                    <HeaderTemplate>
                        <h4 style="color:green"><strong>CPK 그래프:@gTargetModel&nbsp-@gTargetNumber</strong></h4>
                    </HeaderTemplate>
                    <Content>
                        <TelerikChart Height="30%">
                            <ChartTooltip Visible="true" Shared="true"></ChartTooltip>
                            <ChartLegend Visible="true"></ChartLegend>
                            <ChartSeriesItems>
                                @if (@gCh1Visible)
                                {
                                    <ChartSeries Type="ChartSeriesType.Line"
                                            Name="CTQ 측정값"
                                             Data="@gListCtq"
                                             Color="red"
                                             Field="value1">
                                    </ChartSeries>
                                } else
                                {
                                    <ChartSeries Type="ChartSeriesType.Line"
                                                 Name="CTQ 측정값"
                                                 Data="@gListCtqBlank"
                                                 Color="red"
                                                 Field="value1">
                                    </ChartSeries>
                                }
                            </ChartSeriesItems>

                            <ChartValueAxes>
                                <ChartValueAxis Min="@gCh1Lcl" Max="@gCh1Ucl">
                                    <ChartValueAxisTitle Text="측정값-Ch1" />
                                    <ChartValueAxisMajorGridLines Visible="true" />
                                    <ChartValueAxisPlotBands>
                                        <ChartValueAxisPlotBand From="@gCh1Lcl" To="@gCh1Ucl" Color="#00cc00" Opacity="0.1"></ChartValueAxisPlotBand>
                                    </ChartValueAxisPlotBands>
                                </ChartValueAxis>
                            </ChartValueAxes>

                        </TelerikChart>

                        <TelerikChart Height="30%">
                            <ChartTooltip Visible="true" Shared="true"></ChartTooltip>
                            <ChartLegend Visible="true"></ChartLegend>
                            <ChartSeriesItems>
                                @if (@gCh2Visible)
                                {
                                    <ChartSeries Type="ChartSeriesType.Line"
                                                 Name="CTQ 측정값"
                                                 Color="green"
                                                 Data="@gListCtq"
                                                 Field="value2">
                                    </ChartSeries>
                                } else
                                {
                                    <ChartSeries Type="ChartSeriesType.Line"
                                                 Name="CTQ 측정값"
                                                 Color="green"
                                                 Data="@gListCtqBlank"
                                                 Field="value2">
                                    </ChartSeries>

                                }
                            </ChartSeriesItems>

                            <ChartValueAxes>
                                <ChartValueAxis>
                                    <ChartValueAxisTitle Text="측정값-Ch2" />
                                    <ChartValueAxisMajorGridLines Visible="true" />
                                    <ChartValueAxisPlotBands>
                                        <ChartValueAxisPlotBand From="@gCh2Lcl" To="@gCh2Ucl" Color="#00cc00" Opacity="0.1"></ChartValueAxisPlotBand>
                                    </ChartValueAxisPlotBands>
                                </ChartValueAxis>
                            </ChartValueAxes>
                        </TelerikChart>

                        <TelerikChart Height="30%">
                            <ChartTooltip Visible="true" Shared="true"></ChartTooltip>
                            <ChartLegend Visible="true"></ChartLegend>
                            <ChartSeriesItems>
                                @if (@gCh3Visible)
                                {
                                    <ChartSeries Type="ChartSeriesType.Line"
                                            Name="CTQ 측정값"
                                            Data="@gListCtq"
                                            Color="blue"
                                            Field="value3">
                                    </ChartSeries>
                                } else
                                {
                                    <ChartSeries Type="ChartSeriesType.Line"
                                                 Name="CTQ 측정값"
                                                 Data="@gListCtqBlank"
                                                 Color="blue"
                                                 Field="value3">
                                    </ChartSeries>
                                }
                            </ChartSeriesItems>

                            <ChartValueAxes>
                                <ChartValueAxis>
                                    <ChartValueAxisTitle Text="측정값-Ch3" />
                                    <ChartValueAxisMajorGridLines Visible="true" />
                                    <ChartValueAxisPlotBands>
                                        <ChartValueAxisPlotBand From="@gCh3Lcl" To="@gCh3Ucl" Color="#00cc00" Opacity="0.3"></ChartValueAxisPlotBand>
                                    </ChartValueAxisPlotBands>
                                </ChartValueAxis>
                            </ChartValueAxes>
                        </TelerikChart>
                    </Content>
                </TileLayoutItem>
                

            </TileLayoutItems>
        </TelerikTileLayout>
    </CardBody>
</TelerikCard>

@************************** 프로그램 CODE ***************************************************************
        구조체 정의:         CPK_Items, CPK_Statistics, 
********************************************************************************************************@
@code {
    //--- 검사항목 List 구조체
    public class CPK_Items
    {
        public string sn { get; set; }
        public DateTime workdate { get; set; }
        public float value1 { get; set; }
        public float value2 { get; set; }
        public float value3 { get; set; }
    };

    //--- CPK 통계 구조체
    public class CPK_Statistics
    {
        public string name { get; set; }
        public int num { get; set; }
        public int numSpecIn { get; set; }
        public int numGood { get; set; }
        public double average { get; set; }
        public double stddev { get; set; }
        public double sum { get; set; }

        public double min { get; set; }
        public double max { get; set; }
        public double cp { get; set; }
        public double cpk { get; set; }

        public string lcl {get; set; }
        public string ucl {get; set; }
        public string lsl { get; set; }
        public string usl {get; set; }
    };

    //--- Data For Combobox : Model, TestNo, Channel#
    private List<string> gModelNames = new List<string>();
    private List<string> gTestNumbers { get; set; } = new List<string>();

    //--- For GridData/ChartData
    public List<CPK_Items> gListCtq { get; set; }
    public List<CPK_Items> gListCtqBlank { get; set; } = new List<CPK_Items>();

    //--- For GridData
    private TelerikGrid<CPK_Statistics> GridRef { get; set; }   // 검색후 Ctq List Rebind하기 위해 (시간차로 표시 안될 수 있기 때문에)
    public List<CPK_Statistics> gCpkStats { get; set; }         // Cpk통계 Grid에 표시할 값

    //--- For ChartData
    public bool gCh1Visible { get; set; } = true;       // sum = 0 인 경우, data가 없다고 가정하고 grpah를 그리지 않는다.
    public bool gCh2Visible { get; set; } = true;
    public bool gCh3Visible { get; set; } = true;

    //--- 검색 기간 : 2023~2030 사이
    private DateTime gMinYear   = new DateTime(2023, 1, 1, 0, 0, 0);
    private DateTime gMaxYear   = new DateTime(2030, 1, 1, 0, 0, 0);
    private DateTime gStartYear = DateTime.Now;
    private DateTime gEndYear   = DateTime.Now;

    private string gTargetModel = "";
    private string gTargetNumber = "";
    private int gTargetOnlyNumber = 0;
    private string gChannelName = "Channel1";
    private bool gSetDuration = false;
    private int gCounter = 0;

    public int gSpanYear = 0;
    public int gPageSize = 100;
    string gLastSelectedModel = "";

    //--- lcl/ucl, lsl,usl
    public double gCh1Lcl { get; set; } = 42;
    public double gCh1Ucl { get; set; } = 46;
    public double gCh2Lcl { get; set; }
    public double gCh2Ucl { get; set; }
    public double gCh3Lcl { get; set; }
    public double gCh3Ucl { get; set; }

    //--- TestNo 콤보박스에 대한 변수
    public TelerikComboBox<string, string> ComboBoxRef { get; set; }

    //--- For Excel Export
    bool ExportAllPages { get; set; }
    string gStrFilename { get; set; }   // exported excel filename : CtqList_ModelName_TestNumber_yyyy-mm-dd_HH.mm.ss.xlsx


    //======================================================================
    //     초기화 : excel filename 지정, 기본기간지정, 변수 초기화, 해당 ModelName 추출
    protected override async Task OnInitializedAsync()
    {
        gStrFilename = "CtqList_" + gTargetModel + "_" + gTargetNumber + "_" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss");
        gStartYear = gEndYear.AddMonths(-12);
        gCpkStats = new List<CPK_Statistics>();
        List_Models();
    }

    //======================================================================
    //      Cpk관리할 Model 이름 List를 DB에서 읽어 온다.
    private void List_Models()
    {
        gModelNames = cpkService.GetCpkModelNames();
        //--- 첫번째 모델, 첫번째 TestNo 설정
        if (gModelNames.Count != 0)
        {
            gTargetModel = gModelNames[0];
            Refresh_TestNo_For_Model(gTargetModel);
        }
    }

    // ======================================================================
    //      모델이 변경되면, 해당 모델의 TestNo List를 새로 가져온다.
    private async void ModelChangeHandler(object theUserInput)
    {
        string selectedModel = theUserInput.ToString();
        Refresh_TestNo_For_Model(selectedModel);
    }

    // ======================================================================
    //      모델이 변경되면, 해당 모델의 TestNo List를 새로 가져온다.
    private void Refresh_TestNo_For_Model(string selectedModel)
    {
        if (selectedModel == gLastSelectedModel)
            return;

        gLastSelectedModel = selectedModel;

        //--- Check Test Items
        gTestNumbers.Clear();
        using (var db = new FimsDbContext())
        {
            var lists = db.CpkItems.Where(n => n.Model == gLastSelectedModel).Select(p => p.TestNo).ToList();

            List<int> temp = lists.ToList();
            foreach (var tno in temp)
            {
                gTestNumbers.Add("(" + tno + "):" + db.TspecItems.Where(x => x.TestNo == tno).Select(p => p.Title).FirstOrDefault());
            }

            gTargetNumber = gTestNumbers[0];
        }

        ComboBoxRef?.Rebind();
    }

    // ======================================================================
    //-- Need Model Name, Test#, ChannelNo
    //     1) DB에서 해당Model, 해당TestNo에 대한 검사 data를 추출한다. (gListCtq)
    //     2) 계산 : gCpkStats 값 채움. 항목수, 평균, 표준편차, 최대/최소,
    private void Retrieve_TestData_For_Model()
    {

        //--- Model이나 TestNo가 지정되어야만 한다.
        if (gTargetModel == null || gTargetModel.Length < 3 || 
            gTargetNumber == null || gTargetNumber.Length < 3)
        {
            Alert("Model, TestNo를 선택해야 합니다");
            return;
        }

        //--- TestNo 콤보박스에는 Test#+TestName이 들어가 있다. Test#만 추출한다. 통계 data 계산할때 필요.
        string strTargetNo = gTargetNumber.Substring(gTargetNumber.IndexOf("(") + 1, gTargetNumber.IndexOf(")") - 1);
        gTargetOnlyNumber = int.Parse(strTargetNo);

        //--- 1) DB에서 해당Model, 해당TestNo에 대한 검사 data를 추출한다. (ch1~3 값이 모두 0인 것은 제외한다.)
        using (var db = new FimsDbContext())
        {
            if (gSetDuration == false) // 날짜 무시
            {
                gListCtq = (from sheet in db.Tsheets
                            from item in db.Titems
                            orderby sheet.InspectionEndDateTime
                            where sheet.ProductModel == gTargetModel &&
                                 sheet.Id == item.TsheetId &&
                                 item.TestNo == gTargetOnlyNumber
                            select new CPK_Items
                        {
                            sn = sheet.ProductSerial,
                            workdate = sheet.InspectionEndDateTime,
                            value1 = (float)(item.Ch1Data == null ? 0.0 : float.Parse(item.Ch1Data)),
                            value2 = (float)(item.Ch2Data == null ? 0.0 : float.Parse(item.Ch2Data)),
                            value3 = (float)(item.Ch3Data == null ? 0.0 : float.Parse(item.Ch3Data))
                        }).ToList();
            }
            else
            {
                string strStartDate = gStartYear.ToString("yyyy-MM-dd");
                string strEndDate = gEndYear.ToString("yyyy-MM-dd");

                gListCtq = (from sheet in db.Tsheets
                            from item in db.Titems
                            orderby sheet.InspectionEndDateTime
                            where sheet.ProductModel == gTargetModel &&
                                 sheet.Id == item.TsheetId &&
                                 item.TestNo == gTargetOnlyNumber &&
                                 sheet.InspectionEndDateTime >= gStartYear &&
                                 sheet.InspectionEndDateTime <= gEndYear
                            select new CPK_Items 
                        {
                                sn = sheet.ProductSerial,
                                workdate = sheet.InspectionEndDateTime,
                                value1 = (float)(item.Ch1Data == null ? 0.0 : float.Parse(item.Ch1Data)),
                                value2 = (float)(item.Ch2Data == null ? 0.0 : float.Parse(item.Ch2Data)),
                                value3 = (float)(item.Ch3Data == null ? 0.0 : float.Parse(item.Ch3Data))
                        }).ToList();
            }

            gListCtq = gListCtq.Where(x => x.value1 != 0 || x.value2 != 0 || x.value3 != 0).ToList();
            gCounter = gListCtq.Count();

            //----------------------------------------------------------------------------------------------
            //--- 2) 계산 : gCpkStats 값 채움. 항목수, 평균, 표준편차, 최대/최소, 
            CPK_Statistics record;

            gCpkStats.Clear();
            gCh1Visible = false;
            gCh2Visible = false;
            gCh3Visible = false;

            record = GetStatistics(1, gListCtq);
            if (record.sum!= 0)
            {
                gCpkStats.Add(record);
                gCh1Visible = true;
            }

            record = GetStatistics(2, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gCh2Visible = true;
            }

            record = GetStatistics(3, gListCtq);
            if (record.sum != 0)
            {
                gCpkStats.Add(record);
                gCh3Visible = true;
            }

            GridRef?.Rebind();
        }
    }

    //======================================================================
    //--- 특정 채널 data에 대해 각종 통계값 계산
    //    (평균, 최소, 최대, 표준편차, 합계, lsl, usl, lcl, ucl)
    //--- Sample 수가 30개가 넘는 경우에
    //    (cp, cpk, 양품수) (chart에 표시할 lcl/ucl값 = gChxLcl/gChxUcl)
    private CPK_Statistics GetStatistics(int ixCh, List<CPK_Items> cpkitems)
    {
        List<float> items;

        if (ixCh == 1)
        {
            items = cpkitems.Select(n => n.value1).ToList();
        } else if (ixCh == 2)
        {
            items = cpkitems.Select(n => n.value2).ToList();
        }
        else if (ixCh == 3)
        {
            items = cpkitems.Select(n => n.value3).ToList();
        }
        else
        {
            return null;
        }

        string strLSL = "";
        string strUSL = "";
        CPK_Statistics record = new CPK_Statistics();

        record.name = "Ch-" + ixCh.ToString();
        record.num = items.Count();
        if (record.num >= 30)
        {
            record.average = items.Average();
            record.min = items.Min();
            record.max = items.Max();
            record.stddev = getStandardDeviation(items);
            record.sum = items.Sum();

            //--- get lsl,usl, lcl, ucl
            cpkService.GetSL(gTargetModel, gTargetOnlyNumber, ixCh, ref strLSL, ref strUSL);
            record.lsl = strLSL;
            record.usl = strUSL;
            cpkService.GetCL(gTargetModel, gTargetOnlyNumber, ixCh, ref strLSL, ref strUSL);
            record.lcl = strLSL;
            record.ucl = strUSL;

            if (record.sum != 0)
            {
                double dl = double.Parse(record.lcl??"0");
                double du = double.Parse(record.ucl??"0");

                switch(ixCh)
                {
                    case 1:
                        gCh1Lcl = dl;
                        gCh1Ucl = du;
                        break;
                    case 2:
                        gCh2Lcl = dl;
                        gCh2Ucl = du;
                        break;
                    case 3:
                        gCh3Lcl = dl;
                        gCh3Ucl = du;
                        break;
                }

                //--- cpk, cp 계산
                //    Cp = (UCL-LCL)/(6*표준편차)
                //    Cpk = MIN( (평균-LSL)/(3*표준편차), (USL-평균)/(3*표준편차))
                dl = double.Parse(record.lcl ?? "0");
                du = double.Parse(record.ucl ?? "0");
                record.cp = (du - dl) / (6 * record.stddev);
                double cpk1 = (record.average - dl) / (3 * record.stddev);
                double cpk2 = (du - record.average) / (3 * record.stddev);
                record.cpk = Math.Min(cpk1, cpk2);

                float fdl = (float) dl;
                float fdu = (float) du;
                record.numGood = items.Where(x => x >= fdl && x <= fdu).Count();

            }
        }

        return record;
    }

    //======================================================================
    //--- 표준편차 계산
    private float getStandardDeviation(List<float> floatList)
    {
        float average = floatList.Average();
        float sumOfDerivation = 0;
        foreach (float value in floatList)
        {
            sumOfDerivation += (value) * (value);
        }
        double sumOfDerivationAverage = sumOfDerivation / floatList.Count;
        return (float) Math.Sqrt(sumOfDerivationAverage - (average * average));
    }

    //======================================================================
    //--- 경고 Message 표시
    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message); // Alert
    }

}
