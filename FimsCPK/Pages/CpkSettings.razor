@page "/cpksettings"

@using FimsCPK.Data
@using FimsCPK.Entities
@using FimsCPK.Models;
@using FimsCPK.Services
@using Microsoft.AspNetCore.Identity
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@using Telerik.FontIcons;
@using Telerik.SvgIcons;

@inject IJSRuntime JsRuntime
@inject CpkService cpkService
@inject UserManager<AspNetUser> _userManager
@inject IHttpContextAccessor _httpContextAccessor

@************************** PAGE TITLE *****************************************************************@
<PageTitle>Fims Dashboard</PageTitle>
<div class="card-header text-lg-center pt-2 pb-2 fw-bold px-9"> LCL/UCL 관리 </div>

<TelerikCard>
    @************************** PAGE HEADER 구성 *************************************************************
    모델 선택 ==> ModelChangeHandler
    ********************************************************************************************************@
    <CardHeader>
        <div style="display: flex; align-items: center; gap: 10px;">
            <label for="myModel"> &nbsp;&nbsp;&nbsp;&nbsp;모델:</label>
            <TelerikComboBox @ref="@ComboBoxCpkModel" Data="@gModelNames" Width="200px" @bind-Value="@gTargetModel" OnChange="@ModelChangeHandler"
            Placeholder="Select Model..." ClearButton="true" Filterable="true">
            </TelerikComboBox>
            <strong style="margin-right:80px" />
            <TelerikButton ThemeColor="primary" OnClick="ShowAddCpkItem" Enabled="@IsManager" Icon="@SvgIcon.Plus">Add Cpk Item</TelerikButton>
            <strong style="margin-right:80px" />
            <label for="myModel"> &nbsp;&nbsp;&nbsp;&nbsp;추가할 Cpk모델:</label>
            <TelerikTextBox @bind-Value="@gStrModelAdd" Width="200px" />
            <TelerikButton ThemeColor="info" OnClick="AddCpkModel" Enabled="@IsManager" Icon="@SvgIcon.Plus">Add Cpk Model</TelerikButton>
        </div>
    </CardHeader>

    @************************** PAGE BODY 구성 ***************************************************************
            특정 모델에 대해 모든 Cpk Test 항목의 LCL/UCL Grid (3 channels) ==> Edit/Delete 가능
            해당 모델의 LSL/USL Grid (참고용)
    ********************************************************************************************************@
    <CardBody>
        <h4 style="color:blue"><strong>LCL/UCL-@gTargetModel</strong></h4>
        <TelerikGrid Data=@gCpkItemsCL EditMode="@GridEditMode.Inline" Pageable="false" Height="500px"
        OnUpdate="@UpdateHandler" OnEdit="@EditHandler" OnDelete="@DeleteHandler" OnCreate="@CreateHandler" OnCancel="@CancelHandler">
            <GridToolBarTemplate>
            </GridToolBarTemplate>
            <GridColumns>
                <GridColumn Field=@nameof(CpkItem.TestNo) Title="TestNo" Editable="false" />
                <GridColumn Field=@nameof(CpkItem.Reserved1) Title="Name" Editable="false" />
                <GridColumn Field=@nameof(CpkItem.Ch1Lcl) Title="Ch1LCL" />
                <GridColumn Field=@nameof(CpkItem.Ch1Ucl) Title="Ch1UCL" />
                <GridColumn Field=@nameof(CpkItem.Ch2Lcl) Title="Ch2LCL" />
                <GridColumn Field=@nameof(CpkItem.Ch2Ucl) Title="Ch2UCL" />
                <GridColumn Field=@nameof(CpkItem.Ch3Lcl) Title="Ch3LCL" />
                <GridColumn Field=@nameof(CpkItem.Ch3Ucl) Title="Ch3UCL" />
                <GridCommandColumn>
                    <GridCommandButton Command="Save" Icon="@SvgIcon.Save" ShowInEdit="true">Update</GridCommandButton>
                    <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" Enabled="@IsManager">Edit</GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash" Enabled="@IsManager">Delete</GridCommandButton>
                    <GridCommandButton Command="Cancel" Icon="@SvgIcon.Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
        </TelerikGrid>

        <h4 style="color:blue"><strong>(참고)LSL/USL-@gTargetModel</strong></h4>
        <TelerikGrid Data=@gCpkItemsSL EditMode="@GridEditMode.Inline" Pageable="false" Height="500px"
        OnUpdate="@UpdateHandler" OnEdit="@EditHandler" OnDelete="@DeleteHandler" OnCreate="@CreateHandler" OnCancel="@CancelHandler">
            <GridColumns>
                <GridColumn Field=@nameof(TspecItem.TestNo) Title="TestNo" Editable="true" />
                <GridColumn Field=@nameof(TspecItem.Ch4Ucl) Title="Name" Editable="true" />
                <GridColumn Field=@nameof(TspecItem.Ch1Lcl) Title="Ch1LSL" />
                <GridColumn Field=@nameof(TspecItem.Ch1Ucl) Title="Ch1USL" />
                <GridColumn Field=@nameof(TspecItem.Ch2Lcl) Title="Ch2LSL" />
                <GridColumn Field=@nameof(TspecItem.Ch2Ucl) Title="Ch2USL" />
                <GridColumn Field=@nameof(TspecItem.Ch3Lcl) Title="Ch3LSL" />
                <GridColumn Field=@nameof(TspecItem.Ch3Ucl) Title="Ch3USL" />
                <GridColumn Field=@nameof(TspecItem.Ch4Ucl) Title="비고" />
            </GridColumns>
        </TelerikGrid>
        @if (AddCpkItemDialogVisible)
        {
            <AddCpkItemDialog AddCpkItemFinished="OnAddUserFinished" gListModels=@gModelNames gModelName=@gTargetModel></AddCpkItemDialog>
        }
    </CardBody>

</TelerikCard>

@************************** 프로그램 CODE ***************************************************************
        주요변수, 함수들
********************************************************************************************************@

@code {

    //--- Data For Combobox : Model
    private List<string> gModelNames = new List<string>();
    private string gTargetModel = "";               // bind value
    private string gLastSelectedModel = "";         // 같은 model 선택했을 때는 no action

    //--- For GridData
    private List<CpkItem> gCpkItemsCL { get; set; } = new List<CpkItem>();
    private List<TspecItem> gCpkItemsSL { get; set; } = new List<TspecItem>();

    //--- LCL/UCL을 일괄 설정하기 위한 변수들 (ActivateConfirm 함수 이용)
    private List<double> gRatioCL = new List<double> { 0.1, 0.2, 0.3 };
    private double gTargetRatio = 0.1;

    [CascadingParameter]
    public DialogFactory Dialogs { get; set; }
    public string gRetMessage { get; set; } = "N";

    //--- Add Cpk Item for a model or for all models
    public bool AddCpkItemDialogVisible { get; set; } = false;
    private string curRole = "None";
    private bool IsManager { get; set; } = false;
    private string gStrModelAdd { get; set; } = "";        // 추가할 cpkModel 이름
    public TelerikComboBox<string, string> ComboBoxCpkModel { get; set; }

    //======================================================================
    //--- 초기화: 관리 모델들 Listup. 최초 모델에 대해 LCL/UCL Listup
    protected override async Task OnInitializedAsync()
    {
        curRole = await GetUserRole();
        if (curRole.Contains("Admin") || curRole.Contains("Manager"))
            IsManager = true;
        List_Models();
    }

    private async Task<string> GetUserRole()
    {
        string strRole = "None";
        var roles = await GetCurrentUserRolesAsync();
        if (roles.Count > 0)
            strRole = roles[0];
        return strRole;
    }

    public async Task<IList<string>> GetCurrentUserRolesAsync()
    {
        // 현재 로그인한 사용자 확인
        var user = await _userManager.GetUserAsync(_httpContextAccessor.HttpContext.User);
        if (user == null)
        {
            return new List<string>();
        }

        // 사용자의 역할 반환
        return await _userManager.GetRolesAsync(user);
    }

    //======================================================================
    //--- 모델 Listup.
    private void List_Models()
    {
        gModelNames = cpkService.GetCpkModelNamesForSetting();
        //--- 첫번째 모델, 첫번째 TestNo 설정
        if (gModelNames.Count != 0)
        {
            //gTargetModel = gModelNames[0];
            gLastSelectedModel = gTargetModel;
            Get_Cpk_Items_For_Model(gTargetModel);
        }
        ComboBoxCpkModel.Rebind();

    }

    //======================================================================
    //--- Model 선택시, 이전 모델이 아니면 LCL/UCL list up
    private async void ModelChangeHandler(object theUserInput)
    {
        if (theUserInput == null)
            return;

        string selectedModel = theUserInput.ToString();
        if (selectedModel == gLastSelectedModel)
            return;

        gLastSelectedModel = selectedModel;

        //--- 해당 모델의 CpkItem을 Listup한다.
        Get_Cpk_Items_For_Model(selectedModel);
    }

    //======================================================================
    //--- 선택된 모델에 대해 LCL/UCL, LSL/USL listup
    private async Task Get_Cpk_Items_For_Model(string strModel)
    {
        //--- if alread models are listed-up, skip
        if (strModel == null || strModel.Length < 3)
            return;

        List<CpkItem> tCpkModelList;

        //using (var db = new FimsDbContext())
        {
            // gCpkItemsCL = db.CpkItems.Where(x => x.Model == strModel).ToList();
            gCpkItemsCL = cpkService.GetCLValuesForModel(strModel);
            //--- Get LSL/USL for gCpkItemsCL
            //    1) TSpecModels에서 Mode TSpecModelId를 구한다.
            //    2) ModelId와 TestNo가 일치하는 TSpecItems를 구한다.
            List<int> listTestNo = gCpkItemsCL.Select(x => x.TestNo).ToList();
            gCpkItemsSL = cpkService.GetSLValuesForModelAndTestNo(strModel, listTestNo);
        }
    }

    //======================================================================
    //--- Edit Handler : Nothing to do
    void EditHandler(GridCommandEventArgs args)
    {
        if (IsManager == false)
            return;

        CpkItem item = (CpkItem)args.Item;

        // prevent opening for edit based on condition
        // if (item.ID < 3)
        {
            //args.IsCancelled = true;// the general approach for cancelling an event
        }
        Console.WriteLine("Edit event is fired.");
    }

    //======================================================================
    //--- Update LCL/UCL
    async Task UpdateHandler(GridCommandEventArgs args)
    {
        if (IsManager == false)
            return;

        CpkItem item = (CpkItem)args.Item;

        await ActivateConfirm("정말로 수정하시겠습니까 ?");
        if (gRetMessage == "N")
            return;

        // perform actual data source operations here through your service
        cpkService.UpdateCpkItem(item);

        // update the local view-model data with the service data
        await Get_Cpk_Items_For_Model(item.Model);

        Console.WriteLine("Update event is fired.");
    }

    //======================================================================
    //--- Delete LCL/UCL
    async Task DeleteHandler(GridCommandEventArgs args)
    {
        if (IsManager == false)
            return;

        CpkItem item = (CpkItem)args.Item;

        await ActivateConfirm("정말로 삭제하시겠습니까 ?");
        if (gRetMessage == "N")
            return;

        // perform actual data source operation here through your service
        cpkService.DeleteCpkItem(item.Model, item.TestNo);

        // update the local view-model data with the service data
        await Get_Cpk_Items_For_Model(item.Model);

        Console.WriteLine("Delete event is fired.");
        List_Models();


    }

    //======================================================================
    //--- Create LCL/UCL
    async Task CreateHandler(GridCommandEventArgs args)
    {
        CpkItem item = (CpkItem)args.Item;

        await ActivateConfirm("정말로 생성하시겠습니까 ?");
        if (gRetMessage == "N")
            return;

        // perform actual data source operation here through your service
        item.Model = gTargetModel;
        cpkService.CreateCpkItem(item);

        // update the local view-model data with the service data
        await Get_Cpk_Items_For_Model(item.Model);

        Console.WriteLine("Create event is fired.");
    }

    //======================================================================
    //--- Cancel Handler : Nothing to do
    async Task CancelHandler(GridCommandEventArgs args)
    {
        CpkItem item = (CpkItem)args.Item;

        // if necessary, perform actual data source operation here through your service
        Console.WriteLine("Cancel event is fired.");
    }

    private void ShowAddCpkItem()
    {
        //if (bIsAdmin == false)
        //    return;

        AddCpkItemDialogVisible = true;
    }

    /// <summary>
    /// - optional: 검사항목에는 있고, CpkItems에는 없는 모델 대상
    /// - 1) 기존에 있는 모델인지 체크
    ///   2) 해당 모델을 이용하여 하나의 Item 추가
    ///      (이후는 기존 기능을 이용하여 Cpk 수정/추가/삭제)
    ///   3) CpkItem을 모두 삭제하면 모델도 삭제됨
    /// </summary>
    private async void AddCpkModel()
    {
        if (string.IsNullOrWhiteSpace(gStrModelAdd))
        {
            Alert("추가할 모델 이름을 지정하세요.");
            return;
        }

        if (gModelNames.Contains(gStrModelAdd) == true)
        {
            Alert("추가할 모델이 이미 존재 합니다.");
            return;
        }

        //--- Add a dummy Cpk Item
        CpkItem newCpk = new CpkItem();

        newCpk.Model = gStrModelAdd;
        newCpk.TestNo = 2009;
        newCpk.Ch1Lcl = "20";
        newCpk.Ch1Ucl = "22";
        cpkService.CreateCpkItem(newCpk);

        List_Models();

        Alert(gStrModelAdd + "모델이 추가 되었습니다.");
    }


    //======================================================================
    //--- CpkItems의 UCL/LCL을 USL/LSL을 기존으로 범위를 좁혀서 설정한다. (아직 미구현)
    public async Task SetCL_WithRatio()
    {
        await ActivateConfirm("정말로 설정하시겠습니까 ?");
        if (gRetMessage == "N")
            return;

        //--- gCpkItemsSL 값을 참고하여 gCpkItemsCL 값을 변경한다.
        double lsl = 0;
        double usl = 0;
        foreach (var sl in gCpkItemsSL)
        {
            CpkItem cpk = gCpkItemsCL.Where(x => x.TestNo == sl.TestNo).FirstOrDefault();
        }
    }

    //======================================================================
    //--- Ratio설정시 confirm
    public async Task ActivateConfirm(string strMessage)
    {
        bool confirmed;
        if (string.IsNullOrWhiteSpace("CPK Settings"))
        {
            confirmed = await Dialogs.ConfirmAsync(strMessage);
        }
        else
        {
            confirmed = await Dialogs.ConfirmAsync(strMessage, "CPK Settings");
        }

        gRetMessage = confirmed ? "Y" : "N";
    }

    private async Task Alert(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message); // Alert
    }



    //=== CpkItem 추가완료 후 처리 루틴: CpkItem 정보를 다시 가져와서 표시
    private async void OnAddUserFinished(NewCpkRegisterRequestModel newRegisterRequestModel)
    {
        AddCpkItemDialogVisible = false;
        Get_Cpk_Items_For_Model(gLastSelectedModel);
        StateHasChanged();
    }

}
